[{"id":"1ad46a03.465eb6","type":"tab","label":"Prepare and save metadata concerning IGSS objects","disabled":false,"info":""},{"id":"a81fa358.5ca4c","type":"inject","z":"1ad46a03.465eb6","name":"Start import","topic":"","payload":"{\"dataSource\":{\"id\":1003,\"name\":\"CustomerName IGSS\",\"url\":\"opc.tcp://localhost:12403/IGSS/IGSSOpcUaServer\",\"description\":\"CustomerName IGSS server\",\"authentification\":{\"type\":\"Anonymous\"},\"rootTopic\":\"ns=2;s=0:IGSS Objects/(All)\",\"defaultInterval\":2000,\"dashboard\":{\"url\":\"http://localhost:1896/ui\"}}}","payloadType":"json","repeat":"","crontab":"00 05 * * 0","once":false,"onceDelay":"","x":150,"y":180,"wires":[["3ce7561f.b1947a","af8b6464.3fd6a8"]]},{"id":"a8e0b68d.5ff2d8","type":"sagofonto-opcua-nodeCrawler","z":"1ad46a03.465eb6","opcuaServerEndpoint":"","rootTopic":"","x":380,"y":260,"wires":[["a3128fa3.a6202","ac95b6cf.14c328"]]},{"id":"ad74dcbc.9f626","type":"postgrestor","z":"1ad46a03.465eb6","name":"Insert datasource","query":"INSERT INTO public.DATASOURCE (DATASOURCE_ID, NAME, URL, AUTHENTICATION_TYPE, DESCRIPTION, UPDATED, DASHBOARD_URL)\nVALUES (\n  {{{ msg.payload.dataSource.id }}}, \n '{{{ msg.payload.dataSource.name }}}', \n '{{{ msg.payload.dataSource.url }}}', \n '{{{ msg.payload.dataSource.authentification.type }}}', \n '{{{ msg.payload.dataSource.description }}}', \n LOCALTIMESTAMP,\n '{{{ msg.payload.dataSource.dashboard.url }}}')\nON CONFLICT (DATASOURCE_ID) DO UPDATE\nSET\n  NAME = '{{{ msg.payload.dataSource.name }}}',\n  URL = '{{{ msg.payload.dataSource.url }}}',\n  AUTHENTICATION_TYPE = '{{{ msg.payload.dataSource.authentification.type }}}',\n  DESCRIPTION = '{{{ msg.payload.dataSource.description }}}',\n  UPDATED = LOCALTIMESTAMP,\n  DASHBOARD_URL = '{{{ msg.payload.dataSource.dashboard.url }}}';\n\n","postgresDB":"b5aa240c.ed55f8","output":false,"outputs":1,"x":630,"y":200,"wires":[[]]},{"id":"3ce7561f.b1947a","type":"postgrestor","z":"1ad46a03.465eb6","name":"Create database tables to contain structure/metadata","query":"--DROP TABLE public.DATASOURCE;\n--DROP TABLE public.SENSOR_OBJECT;\n--DROP TABLE public.SENSOR_OBJECT_NODES;\n--DROP TABLE public.SENSOR_OBJECT_VALUES;\n\n-- Create table DATASOURCE\nCREATE TABLE IF NOT EXISTS public.DATASOURCE ( \n DATASOURCE_ID int NOT NULL, \n NAME character varying(255), \n URL text NOT NULL, \n AUTHENTICATION_TYPE text, \n DESCRIPTION text, \n USERNAME  character varying(255), \n PASSWORD character varying(255), \n UPDATED timestamp without time zone, \nCONSTRAINT DATASOURCE_pkey \n PRIMARY KEY (DATASOURCE_ID)) \n WITH (OIDS=FALSE); \nALTER TABLE public.DATASOURCE OWNER TO hepwat;\n\n-- Create table SENSOR_OBJECT\nCREATE TABLE IF NOT EXISTS public.SENSOR_OBJECT (\n DATASOURCE_ID int NOT NULL, \n SENSOR_OBJECT_ID character varying(255) NOT NULL, \n NAME character varying(255), \n DESCRIPTION text, \n UPDATED timestamp without time zone, \nCONSTRAINT SENSOR_OBJECT_pkey PRIMARY KEY (DATASOURCE_ID, SENSOR_OBJECT_ID)) WITH (OIDS=FALSE); \nALTER TABLE public.SENSOR_OBJECT OWNER TO hepwat;\n\n-- Create table SENSOR_OBJECT_NODES\nCREATE SEQUENCE IF NOT EXISTS SENSOR_OBJECT_NODES_SEQ;\nCREATE TABLE IF NOT EXISTS public.SENSOR_OBJECT_NODES ( \n DATASOURCE_ID int NOT NULL, \n SENSOR_OBJECT_ID character varying(255) NOT NULL, \n SENSOR_OBJECT_NODE_ID character varying(255) NOT NULL,\n SENSOR_OBJECT_NODE_KEY integer NOT NULL DEFAULT nextval('SENSOR_OBJECT_NODES_SEQ'), \n NAME character varying(255), \n DESCRIPTION text, \n DATATYPE  character varying(255), \n NODETYPE character varying(255), \n NODEDOMAIN  text,\n READABLE boolean NOT NULL DEFAULT false,\n WRITEABLE boolean NOT NULL DEFAULT false,\n INTERVAL integer NOT NULL DEFAULT 10000,\n UPDATED timestamp without time zone, \nCONSTRAINT SENSOR_OBJECT_NODES_pkey PRIMARY KEY (SENSOR_OBJECT_ID, DATASOURCE_ID, SENSOR_OBJECT_NODE_ID)) WITH (OIDS=FALSE); \nALTER TABLE public.SENSOR_OBJECT_NODES OWNER TO hepwat;\nALTER SEQUENCE SENSOR_OBJECT_NODES_SEQ OWNER TO hepwat;\nCREATE INDEX IF NOT EXISTS IDX_SENSOR_OBJECT_NODE_KEY ON public.SENSOR_OBJECT_NODES\n  USING btree (SENSOR_OBJECT_NODE_KEY, SENSOR_OBJECT_NODE_ID COLLATE pg_catalog.\"default\");\n  ","postgresDB":"b5aa240c.ed55f8","output":true,"outputs":1,"x":520,"y":140,"wires":[[]]},{"id":"af8b6464.3fd6a8","type":"delay","z":"1ad46a03.465eb6","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":390,"y":200,"wires":[["ad74dcbc.9f626","863f7201.8b37f"]]},{"id":"863f7201.8b37f","type":"delay","z":"1ad46a03.465eb6","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":170,"y":260,"wires":[["a8e0b68d.5ff2d8"]]},{"id":"a3128fa3.a6202","type":"function","z":"1ad46a03.465eb6","name":"Iterate Sensor Objects","func":"if(msg && msg.payload) {\n    if(msg.payload.nodeTree && msg.payload.nodeTree.organizes && msg.payload.nodeTree.organizes.length > 0) {\n        var dataSource = msg.payload.dataSource;\n        for (var ti=0; ti<msg.payload.nodeTree.organizes.length; ti++) {\n            var _topic = msg.payload.nodeTree.organizes[ti];\n            if(_topic){\n                node.send({ \n                    dataSourceId: dataSource.id,\n                    nodeId: _topic.nodeId,\n                    browseName: _topic.browseName,\n                    displayName: _topic.displayName,\n                    description: _topic.description\n                });\n            }\n        }\n    }\n}\nreturn null;\n\n","outputs":"1","noerr":0,"x":280,"y":380,"wires":[["1c9048a8.966997"]]},{"id":"1c9048a8.966997","type":"postgrestor","z":"1ad46a03.465eb6","name":"Create or update Sensor Objects","query":"-- Insert or Update Sensor Object\nINSERT INTO public.SENSOR_OBJECT (DATASOURCE_ID, SENSOR_OBJECT_ID, NAME, DESCRIPTION, UPDATED)\nVALUES (\n {{{ msg.dataSourceId }}}, \n'{{{ msg.nodeId }}}', \n'{{{ msg.description }}}',\n'{{{ msg.description }}}', \nLOCALTIMESTAMP)\nON CONFLICT (DATASOURCE_ID, SENSOR_OBJECT_ID) DO UPDATE\nSET\n   NAME = '{{{ msg.description }}}',\n   DESCRIPTION = '{{{ msg.description }}}',\n   UPDATED = LOCALTIMESTAMP ;","postgresDB":"b5aa240c.ed55f8","output":false,"outputs":1,"x":560,"y":380,"wires":[[]]},{"id":"ac95b6cf.14c328","type":"function","z":"1ad46a03.465eb6","name":"Iterate Sensor Object Nodes","func":"if(msg && msg.payload) {\n    if(msg.payload.nodeTree && msg.payload.nodeTree.organizes && msg.payload.nodeTree.organizes.length > 0) {\n        var dataSource = msg.payload.dataSource;\n        for (var ti=0; ti<msg.payload.nodeTree.organizes.length; ti++) {\n            var _topic = msg.payload.nodeTree.organizes[ti];\n            if(_topic && _topic.hasComponent && _topic.hasComponent.length > 0) {\n        \n                for (var ci=0; ci < _topic.hasComponent.length; ci++) {\n                    var _component = _topic.hasComponent[ci];\n                    \n                    var _output = {\n                        dataSourceId: dataSource.id,\n                        parentNodeId: _component.nodeId.substring(0, _component.nodeId.indexOf(\"?\")),\n                        topic: _component.nodeId,\n                        tmpTopic: _component.nodeId,\n                        browseName: _component.browseName, \n                        description: _component.description, \n                        dataType: _component.dataType.key, \n                        //nodeTypeOld: _component.typeDefinition,\n                        nodeDomain: JSON.stringify(_component.hasProperty).replace(/'/g, '\"'),\n                        readable: true /* (msg.payload.userAccessLevel ? msg.payload.userAccessLevel.indexOf(\"CurrentRead\")>-1 : false) */, \n                        writeable: false /* (msg.payload.userAccessLevel ? msg.payload.userAccessLevel.indexOf(\"CurrentWrite\")>-1 : false) */, \n                        defaultInterval: (dataSource.defaultInterval ? dataSource.defaultInterval : 2000),\n                        unit: null //_component.measureUnit\n                    };\n                    \n                    node.send(_output);\n                }\n            }\n        }\n    }\n}\nreturn null;","outputs":"1","noerr":0,"x":220,"y":440,"wires":[["e3570869.8e6a88"]]},{"id":"ddde5e29.6568f","type":"postgrestor","z":"1ad46a03.465eb6","name":"Create or update Sensor Object Nodes","query":"-- Insert or Update Sensor Object Nodes\nINSERT INTO public.sensor_object_nodes (\n    datasource_id, sensor_object_id, sensor_object_node_id, name, \n    description, datatype, nodedomain, readable, writeable, \"interval\", \n    updated, unit)\nVALUES (\n     {{{ msg.dataSourceId }}}, \n    '{{{ msg.parentNodeId }}}', \n    '{{{ msg.topic }}}', \n    '{{{ msg.browseName }}}', \n    '{{{ msg.description }}}', \n    '{{{ msg.dataType }}}', \n    '{{{ msg.nodeDomain }}}',\n     {{{ msg.readable }}}, \n     {{{ msg.writeable }}}, \n     {{{ msg.defaultInterval }}}, \n    LOCALTIMESTAMP,\n\t'{{{ msg.unit }}}'\n)\nON CONFLICT (DATASOURCE_ID, SENSOR_OBJECT_ID, SENSOR_OBJECT_NODE_ID) DO UPDATE\nSET\n   name = '{{{ msg.browseName }}}', \n   description = '{{{ msg.description }}}', \n   datatype = '{{{ msg.dataType }}}', \n   nodedomain = '{{{ msg.nodeDomain }}}',\n   readable = {{{ msg.readable }}}, \n   writeable = {{{ msg.writeable }}}, \n   \"interval\" = {{{ msg.defaultInterval }}}, \n   updated = LOCALTIMESTAMP,\n   unit = '{{{ msg.unit }}}';","postgresDB":"b5aa240c.ed55f8","output":true,"outputs":1,"x":982,"y":440,"wires":[[]]},{"id":"107fc70d.abe019","type":"comment","z":"1ad46a03.465eb6","name":"Prepare and save metadata concerning IGSS objects using NodeCrawler","info":"","x":320,"y":60,"wires":[]},{"id":"3f1af1.75dc751","type":"catch","z":"1ad46a03.465eb6","name":"","scope":null,"x":152,"y":651.0000085830688,"wires":[["97908e5c.2d172"]]},{"id":"623c4725.203d18","type":"e-mail","z":"1ad46a03.465eb6","server":"localhost","port":"25","secure":false,"name":"","dname":"Send error mail","x":539.0001220703125,"y":650.800048828125,"wires":[]},{"id":"1d2ac5cb.5aa40a","type":"function","z":"1ad46a03.465eb6","name":"Prepare error email","func":"msg.to = 'mail@to.dk';\nmsg.from = 'mail@from.dk';\nmsg.topic = 'Error in Node-Red flow: Prepare and save metadata concerning IGSS objects';\n\nif(msg.error && msg.error.message){\n    msg.payload = '<p style=\"font-family: Trebuchet MS;\">The following error was thrown:</p>';\n    msg.payload += '<p style=\"font-family: Trebuchet MS;\">' + msg.error.message + '</p>';\n    if(msg.error.source){\n        msg.payload += '<p style=\"font-family: Trebuchet MS;\"><b>Source:</b>';\n        if(msg.error.source.id) msg.payload +=   '<li style=\"font-family: Trebuchet MS;\">Id: ' + msg.error.source.id + '</li>';\n        if(msg.error.source.type) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Type: ' + msg.error.source.type + '</li>';\n        if(msg.error.source.name) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Name: ' + msg.error.source.name + '</li>';\n        msg.payload += '</p>';\n    }\n    msg.payload += '<p><a href=\"http://localhost:1895\" target=\"_blank\">Goto flow...</a></p>';\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":336,"y":650.800048828125,"wires":[["623c4725.203d18"]]},{"id":"2aecaad1.90d9b6","type":"comment","z":"1ad46a03.465eb6","name":"Logging and error handling","info":"","x":166.99999618530273,"y":594.0000085830688,"wires":[]},{"id":"9bf3c3e6.a5e62","type":"OpcUa-Client","z":"1ad46a03.465eb6","endpoint":"595f9544.484bbc","action":"read","time":10,"timeUnit":"s","name":"","x":633,"y":440,"wires":[["933005ef.7fd908"]]},{"id":"933005ef.7fd908","type":"function","z":"1ad46a03.465eb6","name":"Set Unit","func":"try {\n\n// Set the value of unit from the EngineeringUnits sibling\nif(msg.payload.displayName && msg.payload.displayName.text.length > 0){\n    msg.unit = msg.payload.displayName.text;\n}\nelse{\n    msg.unit = null;\n}\n\n// Set topic back to that of sensor object node id\n//msg.topic = flow.get('tmpTopic');\nmsg.topic = msg.tmpTopic;\n\n// Delete datatype and topic_temp property from message object\ndelete msg.datatype;\ndelete msg.tmpTopic;\n\nreturn msg;\n\n} catch (err) {\n\t\tif(err.message){\n\t\t    // Trigger catch node\n            node.error(err.message, msg);\n        \n\t\t    // Log to console\n            node.error(err.message);\n        } else {\n            node.error(\"Error: \", err)\n        }\n}","outputs":1,"noerr":0,"x":766,"y":500.25,"wires":[["ddde5e29.6568f"]]},{"id":"e3570869.8e6a88","type":"function","z":"1ad46a03.465eb6","name":"Get Engineering Unit Sibling","func":"try{\n\n// Set flow variabel to hold value of sensor_object_node_id\n// flow.set('tmpTopic', msg.topic);\n\n// If datatype is double set topic to engineering units\nif(msg.dataType == \"Double\" && msg.browseName != \"ANA_VALUE\"){\n    msg.topic = msg.topic + \"/EngineeringUnits\";\n    msg.datatype = \"ExtensionObject\";\n}\nelse{    // otherwise just pass data trough\n    msg.topic = msg.topic;\n    msg.datatype = msg.dataType;\n}\n\nreturn msg;\n\n} catch (err) {\n\t\tif(err.message){\n\t\t    // Trigger catch node\n            node.error(err.message, msg);\n        \n\t\t    // Log to console\n            node.error(err.message);\n        } else {\n            node.error(\"Error: \", err)\n        }\n}","outputs":1,"noerr":0,"x":442,"y":500.25,"wires":[["9bf3c3e6.a5e62"]]},{"id":"f3b0dc30.ca4ee","type":"sagofonto-log-backup","z":"1ad46a03.465eb6","sourcePath":"/usr/src/node-red/","sourceFilename":"hepwat.log","destPath":"/usr/src/node-red/logs/","x":310,"y":780,"wires":[[]]},{"id":"8f6d9054.8c682","type":"inject","z":"1ad46a03.465eb6","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 00 * * 1,5,6,0","once":false,"onceDelay":0.1,"x":150,"y":780,"wires":[["f3b0dc30.ca4ee"]]},{"id":"97908e5c.2d172","type":"file","z":"1ad46a03.465eb6","name":"catch.log","filename":"/usr/src/node-red/catch.log","appendNewline":true,"createDir":false,"overwriteFile":"false","x":310,"y":720,"wires":[]},{"id":"b5aa240c.ed55f8","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"595f9544.484bbc","type":"OpcUa-Endpoint","z":"","endpoint":"opc.tcp://localhost:12403/IGSS/IGSSOpcUaServer","secpol":"None","secmode":"NONE","login":false}]