[{"id":"68390604.5b65c8","type":"subflow","name":"robot monitor 15","info":"","in":[{"x":60.60003662109375,"y":199.60000610351562,"wires":[{"id":"2ebbf9e1.367bb6"}]}],"out":[{"x":620,"y":200,"wires":[{"id":"524371d1.729e8","port":0}]}]},{"id":"2ebbf9e1.367bb6","type":"switch","z":"68390604.5b65c8","name":"Is this flow enabled?","property":"start-stop","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":260,"y":200,"wires":[["524371d1.729e8"]]},{"id":"a95a0b10.c83908","type":"ui_switch","z":"68390604.5b65c8","name":"","label":"Stop/Start Robot:","group":"8e62e886.ca8a28","order":6,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":790,"y":438,"wires":[["49d7109e.dc598","86d9a01c.e2415"]]},{"id":"49d7109e.dc598","type":"change","z":"68390604.5b65c8","name":"Enable / Disable this flow","rules":[{"t":"set","p":"start-stop","pt":"flow","to":"payload","tot":"msg"},{"t":"set","p":"emailSent","pt":"global","to":"0","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":1043,"y":407,"wires":[[]]},{"id":"3553caef.b0db56","type":"ui_gauge","z":"68390604.5b65c8","name":"Operating Sensors","group":"8e62e886.ca8a28","order":1,"width":0,"height":0,"gtype":"gage","title":"{{msg.gaugeLabel}}","label":"%","format":"{{msg.availableSensors}}","min":0,"max":"100","colors":["#ca3838","#e6e600","#00b500"],"seg1":"33","seg2":"66","x":912,"y":955,"wires":[]},{"id":"65047b98.238e04","type":"ui_text","z":"68390604.5b65c8","group":"8e62e886.ca8a28","order":4,"width":0,"height":0,"name":"","label":"Last Run:","format":"{{msg.lastrun}}","layout":"row-spread","x":1208,"y":588,"wires":[]},{"id":"edb12674.724168","type":"comment","z":"68390604.5b65c8","name":"Flow to monitor robot","info":"","x":140,"y":129,"wires":[]},{"id":"67859840.35e448","type":"comment","z":"68390604.5b65c8","name":"Stop / Start robot monitor","info":"","x":385,"y":377,"wires":[]},{"id":"5b5904c2.f282bc","type":"comment","z":"68390604.5b65c8","name":"Calculate percentage of operating sensors","info":"","x":436,"y":913,"wires":[]},{"id":"776c6f0f.8238e","type":"comment","z":"68390604.5b65c8","name":"Flow for logging and error handling","info":"","x":180,"y":1188,"wires":[]},{"id":"e6f85e6.f4b37a","type":"switch","z":"68390604.5b65c8","name":"Is notification enabled?","property":"notification","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":309.00000381469727,"y":1243,"wires":[["eacbd1f3.4e10b"]]},{"id":"14985152.f635ff","type":"ui_switch","z":"68390604.5b65c8","name":"Notification","label":"Notification:","group":"8e62e886.ca8a28","order":7,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":770,"y":771,"wires":[["17244818.ccc7c8","854aa572.93af58"]]},{"id":"17244818.ccc7c8","type":"change","z":"68390604.5b65c8","name":"Enable / Disable notification","rules":[{"t":"set","p":"notification","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":996,"y":744,"wires":[[]]},{"id":"ee92686f.7b8528","type":"catch","z":"68390604.5b65c8","name":"","scope":null,"x":101.00000381469727,"y":1243,"wires":[["e6f85e6.f4b37a"]]},{"id":"deb27000.1b8b2","type":"e-mail","z":"68390604.5b65c8","server":"localhost","port":"25","secure":false,"name":"","dname":"Send error mail","x":781.0000038146973,"y":1243,"wires":[]},{"id":"eacbd1f3.4e10b","type":"function","z":"68390604.5b65c8","name":"Prepare error email","func":"// Only create one user notification\nif(flow.get('mailSent')){\n    return null;\n} else {\n\n    msg.to = 'mail@to.dk';\n    msg.from = 'mail@from.dk';\n    msg.topic = 'Error in robot monitor for flow: Libelium devices to Kafka';\n    \n    if(msg.error && msg.error.message){\n        msg.payload = '<p style=\"font-family: Trebuchet MS;\">The following error was thrown:</p>';\n        msg.payload += '<p style=\"font-family: Trebuchet MS;\">' + msg.error.message + '</p>';\n        if(msg.error.source){\n            msg.payload += '<p style=\"font-family: Trebuchet MS;\"><b>Source:</b>';\n            if(msg.error.source.id) msg.payload +=   '<li style=\"font-family: Trebuchet MS;\">Id: ' + msg.error.source.id + '</li>';\n            if(msg.error.source.type) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Type: ' + msg.error.source.type + '</li>';\n            if(msg.error.source.name) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Name: ' + msg.error.source.name + '</li>';\n            msg.payload += '</p>';\n        }\n        msg.payload += '<p><a href=\"http://localhost:1905/ui\" target=\"_blank\">Goto dashboard...</a></p>';\n    }\n    flow.set('mailSent', true);\n    return msg;\n}","outputs":1,"noerr":0,"x":559.0000038146973,"y":1243,"wires":[["deb27000.1b8b2"]]},{"id":"bb8266eb.2e4998","type":"ui_text","z":"68390604.5b65c8","group":"8e62e886.ca8a28","order":3,"width":0,"height":0,"name":"","label":"Interval:","format":"{{msg.interval}}","layout":"row-spread","x":1209,"y":545,"wires":[]},{"id":"42263f1f.6be26","type":"http in","z":"68390604.5b65c8","name":"","url":"/libelium_log","method":"get","upload":false,"swaggerDoc":"","x":118.00000381469727,"y":1370,"wires":[["c18aff3f.ed033"]]},{"id":"68fe9936.170e68","type":"http response","z":"68390604.5b65c8","name":"","statusCode":"","headers":{},"x":762.0000038146973,"y":1370,"wires":[]},{"id":"c18aff3f.ed033","type":"file in","z":"68390604.5b65c8","name":"","filename":"/usr/src/node-red/hepwat.log","format":"utf8","chunk":false,"sendError":false,"x":368.00000381469727,"y":1370,"wires":[["dd1186f4.bf4088"]]},{"id":"dd1186f4.bf4088","type":"function","z":"68390604.5b65c8","name":"Format log data","func":"msg.payload = msg.payload.replace(/\\n/gm,'<br>');\nreturn msg;","outputs":1,"noerr":0,"x":599.0000038146973,"y":1370,"wires":[["68fe9936.170e68"]]},{"id":"5d3b2f85.3a749","type":"comment","z":"68390604.5b65c8","name":"Flow for viewing log file","info":"","x":138.00000381469727,"y":1321,"wires":[]},{"id":"524371d1.729e8","type":"function","z":"68390604.5b65c8","name":"Cleanup","func":"delete msg.updateLastRun;\nreturn msg;","outputs":1,"noerr":0,"x":460,"y":200,"wires":[[]]},{"id":"6eccd6b3.fca7a8","type":"postgrestor","z":"68390604.5b65c8","name":"Select last run data","query":"SELECT sensor_object_node_key, interval, lastrun \nFROM public.sensor_object_nodes \nWHERE datasource_id = {{{msg.payload.dataSource.id}}};","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":364,"y":1088,"wires":[["a7e3c82e.5c7d68"]]},{"id":"a7e3c82e.5c7d68","type":"function","z":"68390604.5b65c8","name":"Determine node status","func":"var StatusEnum = {\n    STATUS_OPERATING: 'Operating',\n    STATUS_STOPPED: 'Stopped',\n    STATUS_NO_SIGNAL: 'No signal'\n};\n\nvar i = 0;\nvar _updateStatus = '';\n\nfor ( i = 0; i < msg.payload.rows.length; i++ ) {\n  var _sensor_object_node_key = msg.payload.rows[i].sensor_object_node_key;\n  var _interval = msg.payload.rows[i].interval;\n  var _now = new Date().getTime();\n  var _status = null;\n  var _lastrun = null;\n  \n  if(msg.payload.rows[i].lastrun){\n      _lastrun = msg.payload.rows[i].lastrun.getTime()\n  }\n  \n  if(_lastrun){\n    var _timediff = _now - _lastrun;\n    if(_timediff < 2 * _interval){\n      _status = StatusEnum.STATUS_OPERATING;\n    }\n    else{\n      _status = StatusEnum.STATUS_STOPPED;\n    }\n  }\n  else{\n    _status = StatusEnum.STATUS_NO_SIGNAL;\n  }\n  _updateStatus += \"UPDATE public.sensor_object_nodes SET status = '\" + _status  + \"' WHERE (sensor_object_node_key = \" + _sensor_object_node_key + \");\"; \n}\n\nmsg.updateStatus = _updateStatus;\n\nreturn msg;","outputs":1,"noerr":0,"x":586,"y":1088,"wires":[["43c9e3e3.20abfc"]]},{"id":"43c9e3e3.20abfc","type":"postgrestor","z":"68390604.5b65c8","name":"Update node status","query":"{{{msg.updateStatus}}}\n","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":816,"y":1088,"wires":[[]]},{"id":"208c44fd.eef5dc","type":"postgrestor","z":"68390604.5b65c8","name":"Query Sensor Data","query":"{{{msg.sqlStatements}}}","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":552,"y":974,"wires":[["f3f56025.05f9e"]]},{"id":"e1e429f4.5a5fd8","type":"function","z":"68390604.5b65c8","name":"Get sensor data","func":"var i;\nvar sqlStatements = '';\n\n// Count number of operating sensors\nsqlStatements = \"SELECT count(*) FROM public.sensor_object_nodes WHERE datasource_id = \" + msg.payload.dataSource.id + \" AND status = 'Operating';\";\n\n// Count total number of sensors\nsqlStatements += \"SELECT count(*) FROM public.sensor_object_nodes WHERE datasource_id = \" + msg.payload.dataSource.id + \";\";     \n\nmsg.sqlStatements = sqlStatements;\n\nreturn msg;\n","outputs":1,"noerr":0,"x":357,"y":974,"wires":[["208c44fd.eef5dc"]]},{"id":"f3f56025.05f9e","type":"function","z":"68390604.5b65c8","name":"Calculate","func":"var allSensors = msg.payload.rows[1].count;\nvar operatingSensors = msg.payload.rows[0].count;\nvar availableSensors;\nvar dataSource = flow.get('dataSource');\n\nif(allSensors && allSensors > 0 ){\n    availableSensors = Math.round((operatingSensors / allSensors) * 100);\n    if(availableSensors === 0){\n        secondsAlive = (Date.now() - flow.get('tsRobotStarted')) * 0.001;\n        // node.log(\"secondsAlive = \" + secondsAlive.toFixed(2));\n        if(secondsAlive > 2){\n            node.error(\"No operating sensors are available!\", msg);\n        }\n    }\n}\n\nmsg.gaugeLabel = \"Operating Sensors \" + operatingSensors + \":\" + allSensors; \nmsg.availableSensors = availableSensors;\nmsg.payload = availableSensors;\n\nmsg.updateAvailability = \"UPDATE public.datasource SET availability = \" + msg.payload +\n                         \" WHERE datasource_id = \" + dataSource.id + \";\";\n                         \nreturn msg;\n","outputs":1,"noerr":0,"x":727,"y":974,"wires":[["3553caef.b0db56","99bd8ca.a5f227"]]},{"id":"6db216d9.c31658","type":"postgrestor","z":"68390604.5b65c8","name":"Query Sensor Object Nodes","query":"SELECT sensor_object_node_key, name, description, status \nFROM public.sensor_object_nodes \nWHERE datasource_id = {{{msg.payload.dataSource.id}}} ORDER BY sensor_object_node_key;","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":394,"y":589,"wires":[["200fc551.3b2d4a"]]},{"id":"200fc551.3b2d4a","type":"function","z":"68390604.5b65c8","name":"Device list","func":"var sensors = [];\nvar i;\nvar jsonText = \"\";\n\nfor ( i = 0; i < msg.payload.rows.length; i++ ) {\n  var _sensor_object_node_key = msg.payload.rows[i].sensor_object_node_key;\n  var _name = msg.payload.rows[i].name;\n  var _description = msg.payload.rows[i].description;\n  var _status = msg.payload.rows[i].status;\n  var data = _sensor_object_node_key;\n  var elem = {};\n  var label;\n  \n  label = _sensor_object_node_key + \" : \" + _description;\n  \n  elem[label] = data;\n  sensors.push(elem);\n}\n\nmsg.options = sensors;\nreturn msg;","outputs":1,"noerr":0,"x":572,"y":635,"wires":[["364e2319.1db69c"]]},{"id":"f674857d.b492f8","type":"postgrestor","z":"68390604.5b65c8","name":"Select operation data","query":"select interval, lastrun, status from public.sensor_object_nodes\nwhere sensor_object_node_key = {{{msg.payload}}};","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":857,"y":636,"wires":[["d510a8cc.9ab968"]]},{"id":"42434f56.e2c59","type":"comment","z":"68390604.5b65c8","name":"Update sensor status in PostgreSQL","info":"","x":416,"y":1034,"wires":[]},{"id":"d4d794.e8d8a87","type":"ui_text","z":"68390604.5b65c8","group":"8e62e886.ca8a28","order":5,"width":0,"height":0,"name":"","label":"Sensor Status:","format":"{{msg.status}}","layout":"row-spread","x":1228,"y":628,"wires":[]},{"id":"364e2319.1db69c","type":"ui_dropdown","z":"68390604.5b65c8","name":"Dropdown","label":"","place":"Select sensor...","group":"8e62e886.ca8a28","order":2,"width":0,"height":0,"passthru":false,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"","x":704.5,"y":588.6499633789062,"wires":[["f674857d.b492f8"]]},{"id":"d510a8cc.9ab968","type":"function","z":"68390604.5b65c8","name":"Change format","func":"msg.interval = \"\";\nmsg.lastrun = \"\";\nmsg.status = \"\";\n\nif(msg.payload.rows[0].interval && msg.payload.rows[0].interval > 0){\n    var interval = msg.payload.rows[0].interval;  // interval in milliseconds\n    var time;\n    var unit;\n\n    if (0 < interval && interval <= 60000){                // convert interval to seconds\n      time = interval / 1000;\n      unit = \" [sec]\";    \n    } else if (60000 < interval && interval <= 3600000) {  // convert interval to minutes\n      time = interval / 1000 / 60;\n      unit = \" [min]\";\n    } else if (3600000 < interval) {                       // convert interval to hours\n      time = interval / 1000 / 60 / 60;\n      unit = \" [hour]\";\n    } else {\n      time = \"\";\n      unit = \" [-]\";\n    }\n    \n    msg.interval = time + unit;\n}\nif(msg.payload.rows[0].lastrun){\n    //var localDate = msg.payload.rows[0].lastrun.toISOString();\n    var localDate = msg.payload.rows[0].lastrun.toLocaleString();\n    msg.lastrun = localDate;\n}\nif(msg.payload.rows[0].status){\n    msg.status = msg.payload.rows[0].status;\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1020,"y":589,"wires":[["65047b98.238e04","bb8266eb.2e4998","d4d794.e8d8a87"]]},{"id":"66f2b396.45881c","type":"postgrestor","z":"68390604.5b65c8","name":"Select robot started data","query":"SELECT robot_started FROM public.datasource WHERE datasource_id = {{{msg.payload.dataSource.id}}}","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":384,"y":438,"wires":[["a56a2747.a8a038"]]},{"id":"5551bb7c.9e98f4","type":"postgrestor","z":"68390604.5b65c8","name":"Update robot status","query":"--UPDATE public.datasource \n--SET robot_started = {{{msg.payload}}} \n--WHERE datasource_id = {{{flow.get('dataSource').id}}};\n\n{{{msg.updateRobotStarted}}}","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":1163,"y":451,"wires":[[]]},{"id":"a56a2747.a8a038","type":"function","z":"68390604.5b65c8","name":"Return status","func":"msg.payload = msg.payload.rows[0].robot_started;\nreturn msg;","outputs":1,"noerr":0,"x":592,"y":438,"wires":[["a95a0b10.c83908"]]},{"id":"d0ef98f9.e9b7f8","type":"postgrestor","z":"68390604.5b65c8","name":"Query notification status","query":"SELECT notification_on \nFROM public.datasource \nWHERE datasource_id = {{{msg.payload.dataSource.id}}};","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":385,"y":771,"wires":[["250bfc95.f45e34"]]},{"id":"63e8ad8b.cfc064","type":"postgrestor","z":"68390604.5b65c8","name":"Update notification status","query":"{{{msg.updateNotification}}}\n","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":1127,"y":798,"wires":[[]]},{"id":"250bfc95.f45e34","type":"function","z":"68390604.5b65c8","name":"Return status","func":"msg.payload = msg.payload.rows[0].notification_on;\nreturn msg;","outputs":1,"noerr":0,"x":592,"y":771,"wires":[["14985152.f635ff"]]},{"id":"f2f89a51.651968","type":"comment","z":"68390604.5b65c8","name":"Get data for selected sensor from PostgreSQL","info":"","x":446,"y":534,"wires":[]},{"id":"9b08fc1e.81794","type":"comment","z":"68390604.5b65c8","name":"Enable / Disable notification","info":"","x":396,"y":719,"wires":[]},{"id":"99bd8ca.a5f227","type":"postgrestor","z":"68390604.5b65c8","name":"Update availability","query":"--UPDATE public.datasource \n--SET availability = {{{msg.payload}}} \n--WHERE datasource_id = {{{flow.get('dataSource').id}}};\n\n{{{msg.updateAvailability}}}\n","postgresDB":"67f35698.5ae1d8","output":true,"outputs":1,"x":913,"y":997,"wires":[[]]},{"id":"1b2444ce.f2fe8b","type":"comment","z":"68390604.5b65c8","name":"== REMEMBER TO CONFIGURE PAYLOAD AND REPEAT PROPERTY OF INJECT NODE ==","info":"","x":670,"y":40,"wires":[]},{"id":"1fc8f793.560de8","type":"function","z":"68390604.5b65c8","name":"Set dataSource","func":"flow.set('dataSource', msg.payload.dataSource);\nreturn msg;","outputs":1,"noerr":0,"x":123,"y":438,"wires":[["66f2b396.45881c","6db216d9.c31658","d0ef98f9.e9b7f8"]]},{"id":"374fdf15.2a283","type":"inject","z":"68390604.5b65c8","name":"","topic":"","payload":"{\"dataSource\":{\"id\":1015}}","payloadType":"json","repeat":"","crontab":"","once":true,"x":90,"y":380,"wires":[["1fc8f793.560de8"]]},{"id":"86d9a01c.e2415","type":"function","z":"68390604.5b65c8","name":"sqlRobot","func":"// Update robot status in PostgreSQL\nvar dataSource = flow.get('dataSource');\n\nmsg.updateRobotStarted = \"UPDATE public.datasource SET robot_started = \" + msg.payload +\n                         \" WHERE datasource_id = \" + dataSource.id + \";\";\n\n// Reset notification counter\nflow.set('mailSent', false);\n\n// Timestamp for when robot is started\nif(msg.payload){\n    flow.set('tsRobotStarted', Date.now());\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":993.5,"y":450.5999755859375,"wires":[["5551bb7c.9e98f4"]]},{"id":"854aa572.93af58","type":"function","z":"68390604.5b65c8","name":"sqlNotify","func":"var dataSource = flow.get('dataSource');\n\nmsg.updateNotification = \"UPDATE public.datasource SET notification_on = \" + msg.payload +\n                         \" WHERE datasource_id = \" + dataSource.id + \";\";\n\nreturn msg;","outputs":1,"noerr":0,"x":936,"y":799,"wires":[["63e8ad8b.cfc064"]]},{"id":"5fb080d.7f3ec8","type":"comment","z":"68390604.5b65c8","name":"Flows to monitor functionality","info":"","x":160,"y":305,"wires":[]},{"id":"cc523f98.670f","type":"function","z":"68390604.5b65c8","name":"Set dataSource","func":"flow.set('dataSource', msg.payload.dataSource);\nreturn msg;","outputs":1,"noerr":0,"x":125,"y":975,"wires":[["e1e429f4.5a5fd8","6eccd6b3.fca7a8"]]},{"id":"390b0964.546446","type":"inject","z":"68390604.5b65c8","name":"","topic":"","payload":"{\"dataSource\":{\"id\":1015}}","payloadType":"json","repeat":"300","crontab":"","once":true,"x":92,"y":917,"wires":[["cc523f98.670f"]]},{"id":"8e62e886.ca8a28","type":"ui_group","z":"68390604.5b65c8","name":"Sigfox Libelium","tab":"5bd1dcf8.897584","order":3,"disp":false,"width":"6"},{"id":"67f35698.5ae1d8","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"5bd1dcf8.897584","type":"ui_tab","z":"","name":"Sigfox Libelium","icon":"dashboard","order":1},{"id":"2b5c1f35.099f3","type":"tab","label":"Sigfox Libelium devices to Kafka","disabled":false,"info":""},{"id":"8e0bcc3e.67f35","type":"function","z":"2b5c1f35.099f3","name":"Prepare topic payload","func":"try{\n    var _topicValues = flow.get('topicValues');\n    if(msg.payload && msg.payload.rows.length > 0 && _topicValues && _topicValues.length > 0) {\n        for(var i = 0; i < _topicValues.length; i++) {     \n            for(var j = 0; j < msg.payload.rows.length; j++) {\n                if (msg.payload.rows[j].sensor_object_node_id == _topicValues[i].node_id) {\n                    var _key = msg.payload.rows[j].sensor_object_node_key;\n                    var _value = _topicValues[i].value;\n                    var _interval = msg.payload.rows[j].interval;\n                    var _lastrun = msg.payload.rows[j].lastrun.getTime();          // timestamp from PostgreSQL\n                    var _timestamp = 1000 * (new Date(_topicValues[i].date)).getTime();   // timestamp from Sigfox device\n                    \n                    // Only send payload if new measurement\n                    //if(_timestamp > _lastrun && _value && _value !== null){\n                        node.send({\n                            key: _key,\n                            payload: {\n                                timestamp: _timestamp,\n                                hepwatDeviceId: _key,\n                                value: _value,\n                                interval: _interval\n                            }\n                        });\n                    //}\n                }\n            }\n        }\n    }\n    return null;\n    \n} catch (err) {\n        if(err.message){\n\t\t    // Trigger catch node\n            node.error(err.message, msg);\n        \n\t\t    // Log to console\n            node.error(err.message);\n        } else {\n            node.error(\"Prepare topic payload Error: \", err);\n        }\n}\n","outputs":1,"noerr":0,"x":771,"y":519,"wires":[["a120fe82.b6a98"]]},{"id":"db4abf0d.7cfa7","type":"sagofonto-kafka-producer","z":"2b5c1f35.099f3","kafkaHost":"localhost:9092","connectTimeout":"10000","requestTimeout":"30000","requireAcks":"1","ackTimeoutMs":"100","partitionerType":"3","topicName":"raw-test-10","compressionOption":"0","x":1111,"y":519,"wires":[["edfce01f.b1bcc"]]},{"id":"aff3be36.95bb9","type":"postgrestor","z":"2b5c1f35.099f3","name":"Insert datasource","query":"INSERT INTO public.DATASOURCE (DATASOURCE_ID, NAME, URL, AUTHENTICATION_TYPE, DESCRIPTION, UPDATED, DASHBOARD_URL)\nVALUES (\n  {{{ msg.payload.dataSource.id }}}, \n '{{{ msg.payload.dataSource.name }}}', \n '{{{ msg.payload.dataSource.url }}}', \n '{{{ msg.payload.dataSource.authentification.type }}}', \n '{{{ msg.payload.dataSource.description }}}', \n LOCALTIMESTAMP,\n '{{{ msg.payload.dataSource.dashboard.url }}}')\nON CONFLICT (DATASOURCE_ID) DO UPDATE\nSET\n   NAME = '{{{ msg.payload.dataSource.name }}}',\n   URL = '{{{ msg.payload.dataSource.url }}}',\n   AUTHENTICATION_TYPE = '{{{ msg.payload.dataSource.authentification.type }}}',\n   DESCRIPTION = '{{{ msg.payload.dataSource.description }}}',\n   UPDATED = LOCALTIMESTAMP,\n   DASHBOARD_URL = '{{{ msg.payload.dataSource.dashboard.url }}}';\n   \n","postgresDB":"c604a766.373548","output":false,"outputs":1,"x":549.0000839233398,"y":139.00005626678467,"wires":[["cb9c557e.9538f8"]]},{"id":"ee853913.719678","type":"delay","z":"2b5c1f35.099f3","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":531.0000076293945,"y":196.0000057220459,"wires":[["1917edc9.bd9a72","6408393f.85e818"]]},{"id":"1917edc9.bd9a72","type":"function","z":"2b5c1f35.099f3","name":"Create Sensor Object","func":"var dataSource = msg.payload.dataSource;\nnode.send({ \n    dataSourceId: dataSource.id,\n    nodeId: dataSource.device,\n    browseName: 'libelium-device',\n    displayName: 'Libelium Waspmote device',\n    description: 'Libelium Waspmote device'\n});\nreturn null;","outputs":"1","noerr":0,"x":781.0000457763672,"y":196.00003814697266,"wires":[["d73acd54.01bf6"]]},{"id":"d73acd54.01bf6","type":"postgrestor","z":"2b5c1f35.099f3","name":"Create or update Sensor Objects","query":"-- Insert or Update Sensor Object\nINSERT INTO public.SENSOR_OBJECT (DATASOURCE_ID, SENSOR_OBJECT_ID, NAME, DESCRIPTION, UPDATED)\nVALUES (\n {{{ msg.dataSourceId }}}, \n'{{{ msg.nodeId }}}', \n'{{{ msg.displayName }}}', \n'{{{ msg.description }}}', \nLOCALTIMESTAMP)\nON CONFLICT (DATASOURCE_ID, SENSOR_OBJECT_ID) DO UPDATE\nSET\n   NAME = '{{{ msg.displayName }}}',\n   DESCRIPTION = '{{{ msg.description }}}',\n   UPDATED = LOCALTIMESTAMP ;\n   ","postgresDB":"c604a766.373548","output":false,"outputs":1,"x":1082,"y":196,"wires":[[]]},{"id":"6408393f.85e818","type":"function","z":"2b5c1f35.099f3","name":"Create Sensor Object Nodes","func":"var dataSource = msg.payload.dataSource;\nvar _measurementType = flow.get('measurementType');\n\nnode.send({\n    dataSourceId: dataSource.id,\n    parentNodeId: dataSource.device,\n    topic: 'h2s_1',\n    browseName: 'h2s_1', \n    description: 'Libelium 9381-P H2S Probe 1', \n    dataType: 'double', \n    //nodeTypeOld: 'h2s_1',\n    nodeDomain: '',\n    readable: true, \n    writeable: false, \n    defaultInterval: (dataSource.defaultInterval ? dataSource.defaultInterval : 600000),\n    unit: 'ppm',\n    nodeType: _measurementType['Svovlbrinteniveau']\n});\nnode.send({\n    dataSourceId: dataSource.id,\n    parentNodeId: dataSource.device,\n    topic: 'h2s_2',\n    browseName: 'h2s_2', \n    description: 'Libelium 9381-P H2S Probe 2', \n    dataType: 'double', \n    //nodeTypeOld: 'h2s_2',\n    nodeDomain: '',\n    readable: true, \n    writeable: false, \n    defaultInterval: (dataSource.defaultInterval ? dataSource.defaultInterval : 600000),\n    unit: 'ppm',\n    nodeType: _measurementType['Svovlbrinteniveau']\n});\nnode.send({\n    dataSourceId: dataSource.id,\n    parentNodeId: dataSource.device,\n    topic: 'temp_1',\n    browseName: 'temp_1', \n    description: 'Libelium 9381-P Temp Probe 1', \n    dataType: 'integer', \n    //nodeTypeOld: 'temp_1',\n    nodeDomain: '',\n    readable: true, \n    writeable: false, \n    defaultInterval: (dataSource.defaultInterval ? dataSource.defaultInterval : 600000),\n    unit: '°C',\n    nodeType: _measurementType['Temperatur']\n});\nnode.send({\n    dataSourceId: dataSource.id,\n    parentNodeId: dataSource.device,\n    topic: 'temp_2',\n    browseName: 'temp_2', \n    description: 'Libelium 9381-P Temp Probe 2', \n    dataType: 'integer', \n    //nodeTypeOld: 'temp_2',\n    nodeDomain: '',\n    readable: true, \n    writeable: false, \n    defaultInterval: 600000,\n    unit: '°C',\n    nodeType: _measurementType['Temperatur']\n});\nnode.send({\n    dataSourceId: dataSource.id,\n    parentNodeId: dataSource.device,\n    topic: 'batt_lvl',\n    browseName: 'batt_lvl', \n    description: 'Libelium Waspmote Battery Level', \n    dataType: 'integer', \n    //nodeTypeOld: 'batt_lvl',\n    nodeDomain: '',\n    readable: true, \n    writeable: false, \n    defaultInterval: 600000,\n    unit: '%',\n    nodeType: _measurementType['Batteristatus']\n});\nnode.send({\n    dataSourceId: dataSource.id,\n    parentNodeId: dataSource.device,\n    topic: 'rssi',\n    browseName: 'rssi', \n    description: 'Libelium Waspmote Signal Strength', \n    dataType: 'integer', \n    nodeDomain: '',\n    readable: true, \n    writeable: false, \n    defaultInterval: 600000,\n    unit: 'dBm',\n    nodeType: _measurementType['Signalstyrke']\n});\nreturn null;","outputs":"1","noerr":0,"x":801.0000152587891,"y":252.00006008148193,"wires":[["14b0faf4.d58825"]]},{"id":"14b0faf4.d58825","type":"postgrestor","z":"2b5c1f35.099f3","name":"Create or update Sensor Object Nodes","query":"-- Insert or Update Sensor Object Nodes\nINSERT INTO public.sensor_object_nodes (\n    datasource_id, sensor_object_id, sensor_object_node_id, name, \n    description, datatype, nodedomain, readable, writeable, \"interval\", \n    updated, unit, nodetype)\nVALUES (\n     {{{ msg.dataSourceId }}}, \n    '{{{ msg.parentNodeId }}}', \n    '{{{ msg.topic }}}', \n    '{{{ msg.browseName }}}', \n    '{{{ msg.description }}}', \n    '{{{ msg.dataType }}}', \n    '{{{ msg.nodeDomain }}}',\n     {{{ msg.readable }}}, \n     {{{ msg.writeable }}}, \n     {{{ msg.defaultInterval }}}, \n    LOCALTIMESTAMP,\n    '{{{ msg.unit }}}',\n     {{{ msg.nodeType }}}\n)\nON CONFLICT (DATASOURCE_ID, SENSOR_OBJECT_ID, SENSOR_OBJECT_NODE_ID) DO UPDATE\nSET\n   name = '{{{ msg.browseName }}}', \n   description = '{{{ msg.description }}}', \n   datatype = '{{{ msg.dataType }}}', \n   nodedomain = '{{{ msg.nodeDomain }}}',\n   readable = {{{ msg.readable }}}, \n   writeable = {{{ msg.writeable }}}, \n   \"interval\" = {{{ msg.defaultInterval }}}, \n   updated = LOCALTIMESTAMP,\n   unit = '{{{ msg.unit }}}',\n   nodetype =  {{{ msg.nodeType }}};","postgresDB":"c604a766.373548","output":true,"outputs":1,"x":1091.0000381469727,"y":252.00005865097046,"wires":[[]]},{"id":"e1673560.cf1c28","type":"comment","z":"2b5c1f35.099f3","name":"Prepare and save metadata concerning Libelium object","info":"","x":253.99999237060547,"y":44.99999141693115,"wires":[]},{"id":"a97c4ecd.cccd4","type":"comment","z":"2b5c1f35.099f3","name":"Read Libelium topics from backend and produce data for Kafka topic","info":"","x":296,"y":419.0000419616699,"wires":[]},{"id":"59e3af1b.5e0e8","type":"catch","z":"2b5c1f35.099f3","name":"","scope":null,"x":126,"y":763,"wires":[[]]},{"id":"73b04a4.c6829b4","type":"e-mail","z":"2b5c1f35.099f3","server":"localhost","port":"25","secure":false,"name":"","dname":"Send error mail","x":526,"y":763,"wires":[]},{"id":"114b3514.aab7bb","type":"function","z":"2b5c1f35.099f3","name":"Prepare error email","func":"msg.to = 'mail@to.dk';\nmsg.from = 'mail@from.dk';\nmsg.topic = 'Error in Node-Red flow: Libelium devices to Kafka';\n\nif(msg.error && msg.error.message){\n    msg.payload = '<p style=\"font-family: Trebuchet MS;\">The following error was thrown:</p>';\n    msg.payload += '<p style=\"font-family: Trebuchet MS;\">' + msg.error.message + '</p>';\n    if(msg.error.source){\n        msg.payload += '<p style=\"font-family: Trebuchet MS;\"><b>Source:</b>';\n        if(msg.error.source.id) msg.payload +=   '<li style=\"font-family: Trebuchet MS;\">Id: ' + msg.error.source.id + '</li>';\n        if(msg.error.source.type) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Type: ' + msg.error.source.type + '</li>';\n        if(msg.error.source.name) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Name: ' + msg.error.source.name + '</li>';\n        msg.payload += '</p>';\n    }\n    msg.payload += '<p><a href=\"http://localhost:1905/#flow/36e6cf43.b5715\" target=\"_blank\">Goto flow...</a></p>';\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":316,"y":763,"wires":[["73b04a4.c6829b4"]]},{"id":"ef828b20.50d448","type":"comment","z":"2b5c1f35.099f3","name":"Logging and error handling","info":"","x":174.99999618530273,"y":706,"wires":[]},{"id":"a120fe82.b6a98","type":"subflow:68390604.5b65c8","z":"2b5c1f35.099f3","name":"","x":952,"y":479,"wires":[["db4abf0d.7cfa7"]]},{"id":"861de9d0.3552a8","type":"inject","z":"2b5c1f35.099f3","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 01 * * 1,3,5","once":false,"x":136.5,"y":819.2999877929688,"wires":[["e9a55416.80b9c8"]]},{"id":"e9a55416.80b9c8","type":"sagofonto-log-backup","z":"2b5c1f35.099f3","sourcePath":"/usr/src/node-red/","sourceFilename":"hepwat.log","destPath":"/usr/src/node-red/logs/","x":336.5,"y":819.7999877929688,"wires":[[]]},{"id":"71d70da8.297274","type":"postgrestor","z":"2b5c1f35.099f3","name":"Query Sensor Object Nodes","query":"SELECT sensor_object_id, sensor_object_node_id, sensor_object_node_key, datatype, \"interval\", lastrun\nFROM public.sensor_object_nodes\nWHERE (datasource_id = {{{ msg.dataSource.id }}}) AND (readable = true) \nORDER BY sensor_object_id, sensor_object_node_id ASC;","postgresDB":"dc11dafa.1de188","output":true,"outputs":1,"x":552,"y":479,"wires":[["8e0bcc3e.67f35"]]},{"id":"87b2fe01.11e74","type":"function","z":"2b5c1f35.099f3","name":"Get DataSource","func":"msg.dataSource = flow.get('dataSource');\nreturn msg;","outputs":1,"noerr":0,"x":350,"y":519,"wires":[["71d70da8.297274"]]},{"id":"cfd0a483.6e26d8","type":"http in","z":"2b5c1f35.099f3","name":"","url":"/sigfox/callback/","method":"post","upload":false,"swaggerDoc":"","x":135,"y":139,"wires":[["dd338198.5e042","cd5a7eb8.f3b8e","c9c89113.4bb0f","c93b1ee.1d9dce"]]},{"id":"dd338198.5e042","type":"http response","z":"2b5c1f35.099f3","name":"","statusCode":"","headers":{},"x":320,"y":90,"wires":[]},{"id":"c9c89113.4bb0f","type":"function","z":"2b5c1f35.099f3","name":"Set flow variabel","func":"var _device = msg.payload.device;\n\nmsg.payload = {\n    \"dataSource\": {\n        \"id\": 1015,\n        \"name\": \"Libelium Devices\",\n        \"url\": \"http://localhost:1905/sigfox/callback/\",\n        \"description\": \"Libelium Devices\",\n        \"authentification\": {\n            \"type\": \"none\"\n        },\n        \"rootTopic\": \"\",\n        \"defaultInterval\": 600000,\n        \"dashboard\": {\n            \"url\": \"http://localhost:1905/ui\"\n        },\n        \"device\": _device\n    }\n}\n\n// Set flow variable\nflow.set('dataSource', msg.payload.dataSource);\nreturn msg;","outputs":1,"noerr":0,"x":350,"y":139,"wires":[["aff3be36.95bb9","ee853913.719678"]]},{"id":"cf2a8a17.dae598","type":"function","z":"2b5c1f35.099f3","name":"Handle payload","func":"/*\nmsg.payload = {\n    \"device\": \"205B47\",\n    \"data\": \"000000a0b0c23d23e100\",\n    \"rssi\": -96.00\n    \"time\": 1540555165\n\t};\n*/\n\nvar _pos = [];\n\n_pos[0] = msg.payload.data.search(\"a\");\n_pos[1] = msg.payload.data.search(\"b\");\n_pos[2] = msg.payload.data.search(\"c\");\n_pos[3] = msg.payload.data.search(\"d\");\n_pos[4] = msg.payload.data.search(\"e\");\n_pos[5] = msg.payload.data.length;\n\nvar _nodeId = [\n    \"h2s_1\",\n    \"h2s_2\",\n    \"temp_1\",\n    \"temp_2\",\n    \"batt_lvl\",\n    \"rssi\"\n];\n\nvar _topicValues = [];\n\nfor(i=0; i<5; i++){\n    _topicValues[i] = {\n        node_id: _nodeId[i],\n        date: msg.payload.time,\n        value: parseInt(msg.payload.data.substring(_pos[i]+1, _pos[i+1]))\n    };\n}\n\n// Signal strength,. rssi\nvar _rssi = msg.payload.rssi;\n    \n_topicValues[5] = {\n        node_id: _nodeId[5],\n        date: msg.payload.time,\n        value: _rssi\n};\n\n\nflow.set('topicValues', _topicValues)\n\nreturn msg;","outputs":1,"noerr":0,"x":191,"y":479,"wires":[["87b2fe01.11e74"]]},{"id":"edfce01f.b1bcc","type":"postgrestor","z":"2b5c1f35.099f3","name":"Update Last Run","query":"-- Update last run for Sensor Object Nodes\nUPDATE public.sensor_object_nodes\nSET lastrun = to_timestamp({{{msg.payload.timestamp}}} * 0.001), lastvalue = {{{msg.payload.value}}} \nWHERE (sensor_object_node_key = {{{msg.payload.hepwatDeviceId}}});\n","postgresDB":"fd9374ac.51d338","output":true,"outputs":1,"x":1281,"y":479,"wires":[[]]},{"id":"cb9c557e.9538f8","type":"postgrestor","z":"2b5c1f35.099f3","name":"Query measurement type","query":"SELECT * FROM config_measurement_type;","postgresDB":"9857c82.1c93c38","output":true,"outputs":1,"x":791,"y":139,"wires":[["8d5a01b1.79761"]]},{"id":"8d5a01b1.79761","type":"function","z":"2b5c1f35.099f3","name":"Set measurement type","func":"var _measurementType = {};\n\nfor(i=0; i<msg.payload.rows.length; i++){\n    _measurementType[msg.payload.rows[i].name] = msg.payload.rows[i].id;\n}\n\nmsg.measurementType = _measurementType;\n\nflow.set(\"measurementType\", _measurementType);\n\nreturn msg;\n//return null;","outputs":1,"noerr":0,"x":1042,"y":139,"wires":[["4beb8332.fbd19c"]]},{"id":"4beb8332.fbd19c","type":"debug","z":"2b5c1f35.099f3","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":1224,"y":139,"wires":[]},{"id":"cd5a7eb8.f3b8e","type":"delay","z":"2b5c1f35.099f3","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":172,"y":304,"wires":[["cf2a8a17.dae598"]]},{"id":"4ffc8886.c80ab8","type":"function","z":"2b5c1f35.099f3","name":"Sigfox payloads","func":"var _time = Number((msg.payload * 0.001).toFixed(0));\n\n// Payload for test purposes (h2s, temp, batt lvl, rssi)\nmsg.payload =\n{\n  \"device\": \"205B47\",\n  \"data\": \"000000a114b116c10d9e85\",\n  \"rssi\": -96.00,\n  \"time\": _time\n}\nreturn msg;\n","outputs":1,"noerr":0,"x":350,"y":580,"wires":[[]]},{"id":"c993844.960dc78","type":"inject","z":"2b5c1f35.099f3","name":"Only for testing","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":154,"y":580,"wires":[["4ffc8886.c80ab8"]]},{"id":"c93b1ee.1d9dce","type":"debug","z":"2b5c1f35.099f3","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":320,"y":196,"wires":[]},{"id":"c604a766.373548","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"dc11dafa.1de188","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"fd9374ac.51d338","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"9857c82.1c93c38","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"}]