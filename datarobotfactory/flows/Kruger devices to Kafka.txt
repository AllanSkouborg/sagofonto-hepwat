[{"id":"1e0e78d.ff1b387","type":"subflow","name":"robot monitor 11","info":"","in":[{"x":60.60003662109375,"y":199.60000610351562,"wires":[{"id":"2232ef83.875c6"}]}],"out":[{"x":634,"y":180,"wires":[{"id":"7e48bf87.70e33","port":0}]}]},{"id":"2232ef83.875c6","type":"switch","z":"1e0e78d.ff1b387","name":"Is this flow enabled?","property":"start-stop","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":260,"y":200,"wires":[["e4e5a356.9330e","7e48bf87.70e33"]]},{"id":"1d100104.1c76bf","type":"ui_switch","z":"1e0e78d.ff1b387","name":"","label":"Stop/Start Robot:","group":"d857139.95c98f","order":6,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":790,"y":438,"wires":[["3ea44f7d.d7e26","483590d7.9551e"]]},{"id":"3ea44f7d.d7e26","type":"change","z":"1e0e78d.ff1b387","name":"Enable / Disable this flow","rules":[{"t":"set","p":"start-stop","pt":"flow","to":"payload","tot":"msg"},{"t":"set","p":"emailSent","pt":"global","to":"0","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":1043,"y":407,"wires":[[]]},{"id":"5b58568c.5baec8","type":"ui_gauge","z":"1e0e78d.ff1b387","name":"Operating Sensors","group":"d857139.95c98f","order":1,"width":0,"height":0,"gtype":"gage","title":"{{msg.gaugeLabel}}","label":"%","format":"{{msg.availableSensors}}","min":0,"max":"100","colors":["#ca3838","#e6e600","#00b500"],"seg1":"33","seg2":"66","x":910,"y":905,"wires":[]},{"id":"900eb6e4.d9aa88","type":"ui_text","z":"1e0e78d.ff1b387","group":"d857139.95c98f","order":4,"width":0,"height":0,"name":"","label":"Last Run:","format":"{{msg.lastrun}}","layout":"row-spread","x":1208,"y":565,"wires":[]},{"id":"2c1805d1.55249a","type":"comment","z":"1e0e78d.ff1b387","name":"Flow to monitor robot","info":"","x":140,"y":129,"wires":[]},{"id":"c6e4f6b2.c4d668","type":"comment","z":"1e0e78d.ff1b387","name":"Stop / Start robot monitor","info":"","x":385,"y":377,"wires":[]},{"id":"4a12b10.394fe5","type":"comment","z":"1e0e78d.ff1b387","name":"Calculate percentage of operating sensors","info":"","x":433,"y":863,"wires":[]},{"id":"71cd778d.8b4578","type":"comment","z":"1e0e78d.ff1b387","name":"Flow for logging and error handling","info":"","x":180,"y":1195,"wires":[]},{"id":"52b1ba24.54f214","type":"switch","z":"1e0e78d.ff1b387","name":"Is notification enabled?","property":"notification","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":309.00000381469727,"y":1250,"wires":[["e23ea393.49928"]]},{"id":"5042c4c8.ea9acc","type":"ui_switch","z":"1e0e78d.ff1b387","name":"Notification","label":"Notification:","group":"d857139.95c98f","order":7,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":770,"y":745,"wires":[["bf7a2081.eff64","5a767e17.f972c"]]},{"id":"bf7a2081.eff64","type":"change","z":"1e0e78d.ff1b387","name":"Enable / Disable notification","rules":[{"t":"set","p":"notification","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":996,"y":718,"wires":[[]]},{"id":"8a86ccbd.cb56d","type":"catch","z":"1e0e78d.ff1b387","name":"","scope":null,"x":101.00000381469727,"y":1250,"wires":[[]]},{"id":"a356b22f.c99d5","type":"e-mail","z":"1e0e78d.ff1b387","server":"localhost","port":"25","secure":false,"name":"","dname":"Send error mail","x":781.0000038146973,"y":1250,"wires":[]},{"id":"e23ea393.49928","type":"function","z":"1e0e78d.ff1b387","name":"Prepare error email","func":"// Only create one user notification\nif(flow.get('mailSent')){\n    return null;\n} else {\n\n    msg.to = 'mail@to.dk';\n    msg.from = 'mail@from.dk';\n    msg.topic = 'Error in robot monitor for flow: Krüger devices to Kafka';\n    \n    if(msg.error && msg.error.message){\n        msg.payload = '<p style=\"font-family: Trebuchet MS;\">The following error was thrown:</p>';\n        msg.payload += '<p style=\"font-family: Trebuchet MS;\">' + msg.error.message + '</p>';\n        if(msg.error.source){\n            msg.payload += '<p style=\"font-family: Trebuchet MS;\"><b>Source:</b>';\n            if(msg.error.source.id) msg.payload +=   '<li style=\"font-family: Trebuchet MS;\">Id: ' + msg.error.source.id + '</li>';\n            if(msg.error.source.type) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Type: ' + msg.error.source.type + '</li>';\n            if(msg.error.source.name) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Name: ' + msg.error.source.name + '</li>';\n            msg.payload += '</p>';\n        }\n        msg.payload += '<p><a href=\"http://localhost:1901/ui\" target=\"_blank\">Goto dashboard...</a></p>';\n    }\n    flow.set('mailSent', true);\n    return msg;\n}","outputs":1,"noerr":0,"x":559.0000038146973,"y":1250,"wires":[["a356b22f.c99d5"]]},{"id":"55031332.5f3e4c","type":"ui_text","z":"1e0e78d.ff1b387","group":"d857139.95c98f","order":3,"width":0,"height":0,"name":"","label":"Interval:","format":"{{msg.interval}}","layout":"row-spread","x":1209,"y":522,"wires":[]},{"id":"e154dea1.39a2e","type":"http in","z":"1e0e78d.ff1b387","name":"","url":"/kruger_log","method":"get","upload":false,"swaggerDoc":"","x":118.00000381469727,"y":1377,"wires":[["e3e614b1.d7f608"]]},{"id":"6b8295c5.4930ac","type":"http response","z":"1e0e78d.ff1b387","name":"","statusCode":"","headers":{},"x":762.0000038146973,"y":1377,"wires":[]},{"id":"e3e614b1.d7f608","type":"file in","z":"1e0e78d.ff1b387","name":"","filename":"/usr/src/node-red/hepwat.log","format":"utf8","chunk":false,"sendError":false,"x":368.00000381469727,"y":1377,"wires":[["5c9235b9.aaed7c"]]},{"id":"5c9235b9.aaed7c","type":"function","z":"1e0e78d.ff1b387","name":"Format log data","func":"msg.payload = msg.payload.replace(/\\n/gm,'<br>');\nreturn msg;","outputs":1,"noerr":0,"x":599.0000038146973,"y":1377,"wires":[["6b8295c5.4930ac"]]},{"id":"8f981d69.27046","type":"comment","z":"1e0e78d.ff1b387","name":"Flow for viewing log file","info":"","x":138.00000381469727,"y":1328,"wires":[]},{"id":"e4e5a356.9330e","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Update Last Run","query":"-- Update last run for Sensor Object Nodes\nUPDATE public.sensor_object_nodes\nSET lastrun = to_timestamp({{{msg.payload.timestamp}}} * 0.001), lastvalue = {{{msg.payload.value}}} \nWHERE (sensor_object_node_key = {{{msg.payload.hepwatDeviceId}}});\n","postgresDB":"b9d336db.826ba8","output":true,"outputs":1,"x":503,"y":228,"wires":[[]]},{"id":"7e48bf87.70e33","type":"function","z":"1e0e78d.ff1b387","name":"Cleanup","func":"// Properties that should not be forwarded to Kafka\ndelete msg.updateLastRun;\ndelete msg.nodeId;\ndelete msg.interval;\n\nreturn msg;","outputs":1,"noerr":0,"x":474,"y":180,"wires":[[]]},{"id":"346550c0.d79eb","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Select last run data","query":"SELECT sensor_object_node_key, interval, lastrun \nFROM public.sensor_object_nodes \nWHERE datasource_id = {{{msg.payload.dataSource.id}}};","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":364,"y":1088,"wires":[["6931d7a3.5d69f8"]]},{"id":"6931d7a3.5d69f8","type":"function","z":"1e0e78d.ff1b387","name":"Determine node status","func":"var StatusEnum = {\n    STATUS_OPERATING: 'Operating',\n    STATUS_STOPPED: 'Stopped',\n    STATUS_NO_SIGNAL: 'No signal'\n};\n\nvar i = 0;\nvar _updateStatus = '';\n\nfor ( i = 0; i < msg.payload.rows.length; i++ ) {\n  var _sensor_object_node_key = msg.payload.rows[i].sensor_object_node_key;\n  var _interval = msg.payload.rows[i].interval;\n  var _now = new Date().getTime();\n  var _status = null;\n  var _lastrun = null;\n  \n  if(msg.payload.rows[i].lastrun){\n      _lastrun = msg.payload.rows[i].lastrun.getTime()\n  }\n  \n  if(_lastrun){\n    var _timediff = _now - _lastrun;\n    if(_timediff < 2 * _interval){\n      _status = StatusEnum.STATUS_OPERATING;\n    }\n    else{\n      _status = StatusEnum.STATUS_STOPPED;\n    }\n  }\n  else{\n    _status = StatusEnum.STATUS_NO_SIGNAL;\n  }\n  _updateStatus += \"UPDATE public.sensor_object_nodes SET status = '\" + _status  + \"' WHERE (sensor_object_node_key = \" + _sensor_object_node_key + \");\"; \n}\n\nmsg.updateStatus = _updateStatus;\n\nreturn msg;","outputs":1,"noerr":0,"x":586,"y":1088,"wires":[["d5e6bb3a.0067f8"]]},{"id":"d5e6bb3a.0067f8","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Update node status","query":"{{{msg.updateStatus}}}\n","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":816,"y":1088,"wires":[[]]},{"id":"dafec15d.8c036","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Query Sensor Data","query":"{{{msg.sqlStatements}}}","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":549,"y":924,"wires":[["b6e64025.95482"]]},{"id":"63ab972c.57d348","type":"function","z":"1e0e78d.ff1b387","name":"Get sensor data","func":"var i;\nvar sqlStatements = '';\n\n// Count number of operating sensors\nsqlStatements = \"SELECT count(*) FROM public.sensor_object_nodes WHERE datasource_id = \" + msg.payload.dataSource.id + \" AND status = 'Operating';\";\n\n// Count total number of sensors\nsqlStatements += \"SELECT count(*) FROM public.sensor_object_nodes WHERE datasource_id = \" + msg.payload.dataSource.id + \";\";     \n\nmsg.sqlStatements = sqlStatements;\n\nreturn msg;\n","outputs":1,"noerr":0,"x":354,"y":924,"wires":[["dafec15d.8c036"]]},{"id":"b6e64025.95482","type":"function","z":"1e0e78d.ff1b387","name":"Calculate","func":"var allSensors = msg.payload.rows[1].count;\nvar operatingSensors = msg.payload.rows[0].count;\nvar availableSensors;\nvar dataSource = flow.get('dataSource');\n\n// secondsAlive = (Date.now() - flow.get('tsRobotStarted')) * 0.001;\n// node.log(\"secondsAlive = \" + secondsAlive.toFixed(2));\n\nif(allSensors && allSensors > 0 ){\n    availableSensors = Math.round((operatingSensors / allSensors) * 100);\n    if(availableSensors === 0){\n        secondsAlive = (Date.now() - flow.get('tsRobotStarted')) * 0.001;\n        //node.log(\"secondsAlive = \" + secondsAlive.toFixed(2));\n        if(secondsAlive > 2){\n            node.error(\"No operating sensors are available!\", msg);\n        }\n    }\n}\n\nmsg.gaugeLabel = \"Operating Sensors \" + operatingSensors + \":\" + allSensors; \nmsg.availableSensors = availableSensors;\nmsg.payload = availableSensors;\n\nmsg.updateAvailability = \"UPDATE public.datasource SET availability = \" + msg.payload + \" WHERE datasource_id = \" + dataSource.id + \";\";\n                         \nreturn msg;\n","outputs":1,"noerr":0,"x":724,"y":924,"wires":[["5b58568c.5baec8","a5c3c788.b89fb8"]]},{"id":"dbfe0ceb.9b2","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Query Sensor Object Nodes","query":"SELECT sensor_object_node_key, name, description, status \nFROM public.sensor_object_nodes \nWHERE datasource_id = {{{msg.payload.dataSource.id}}} ORDER BY sensor_object_node_key;","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":394,"y":566,"wires":[["a5d16efa.17476"]]},{"id":"a5d16efa.17476","type":"function","z":"1e0e78d.ff1b387","name":"Device list","func":"var sensors = [];\nvar i;\nvar jsonText = \"\";\n\nfor ( i = 0; i < msg.payload.rows.length; i++ ) {\n  var _sensor_object_node_key = msg.payload.rows[i].sensor_object_node_key;\n  var _name = msg.payload.rows[i].name;\n  var _description = msg.payload.rows[i].description;\n  var _status = msg.payload.rows[i].status;\n  var data = _sensor_object_node_key;\n  var elem = {};\n  var label;\n  \n  label = _sensor_object_node_key + \" : \" + _description;\n  \n  elem[label] =  data;\n  sensors.push(elem);\n}\n\nmsg.options = sensors;\nreturn msg;","outputs":1,"noerr":0,"x":572,"y":612,"wires":[["f11b0900.5f48c8"]]},{"id":"d349e40b.b15218","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Select operation data","query":"select interval, lastrun, status from public.sensor_object_nodes\nwhere sensor_object_node_key = {{{msg.payload}}};","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":857,"y":613,"wires":[["7997da51.eea614"]]},{"id":"deb7636a.a962f","type":"comment","z":"1e0e78d.ff1b387","name":"Update sensor status in PostgreSQL","info":"","x":416,"y":1034,"wires":[]},{"id":"500b0371.1eb72c","type":"ui_text","z":"1e0e78d.ff1b387","group":"d857139.95c98f","order":5,"width":0,"height":0,"name":"","label":"Sensor Status:","format":"{{msg.status}}","layout":"row-spread","x":1228,"y":605,"wires":[]},{"id":"f11b0900.5f48c8","type":"ui_dropdown","z":"1e0e78d.ff1b387","name":"Dropdown","label":"","place":"Select sensor...","group":"d857139.95c98f","order":2,"width":0,"height":0,"passthru":false,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"","x":704.5,"y":565.6499633789062,"wires":[["d349e40b.b15218"]]},{"id":"7997da51.eea614","type":"function","z":"1e0e78d.ff1b387","name":"Change format","func":"msg.interval = \"\";\nmsg.lastrun = \"\";\nmsg.status = \"\";\n\nif(msg.payload.rows[0].interval && msg.payload.rows[0].interval > 0){\n    var interval = msg.payload.rows[0].interval;  // interval in milliseconds\n    var time;\n    var unit;\n\n    if (0 < interval && interval <= 60000){                // convert interval to seconds\n      time = interval / 1000;\n      unit = \" [sec]\";    \n    } else if (60000 < interval && interval <= 3600000) {  // convert interval to minutes\n      time = interval / 1000 / 60;\n      unit = \" [min]\";\n    } else if (3600000 < interval) {                       // convert interval to hours\n      time = interval / 1000 / 60 / 60;\n      unit = \" [hour]\";\n    } else {\n      time = \"\";\n      unit = \" [-]\";\n    }\n    \n    msg.interval = time + unit;\n}\nif(msg.payload.rows[0].lastrun){\n    //var localDate = msg.payload.rows[0].lastrun.toISOString();\n    var localDate = msg.payload.rows[0].lastrun.toLocaleString();\n    msg.lastrun = localDate;\n}\nif(msg.payload.rows[0].status){\n    msg.status = msg.payload.rows[0].status;\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1020,"y":566,"wires":[["900eb6e4.d9aa88","55031332.5f3e4c","500b0371.1eb72c"]]},{"id":"6ede5a48.be6524","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Select robot started data","query":"SELECT robot_started FROM public.datasource WHERE datasource_id = {{{msg.payload.dataSource.id}}}","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":384,"y":438,"wires":[["2ee97bfe.e1b5c4"]]},{"id":"a108566b.690ec8","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Update robot status","query":"--UPDATE public.datasource \n--SET robot_started = {{{msg.payload}}} \n--WHERE datasource_id = {{{flow.get('dataSource').id}}};\n\n{{{msg.updateRobotStarted}}}","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":1162,"y":451,"wires":[[]]},{"id":"2ee97bfe.e1b5c4","type":"function","z":"1e0e78d.ff1b387","name":"Return status","func":"msg.payload = msg.payload.rows[0].robot_started;\nreturn msg;","outputs":1,"noerr":0,"x":592,"y":438,"wires":[["1d100104.1c76bf"]]},{"id":"34ce89ac.40c226","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Query notification status","query":"SELECT notification_on \nFROM public.datasource \nWHERE datasource_id = {{{msg.payload.dataSource.id}}};","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":385,"y":745,"wires":[["933de318.49aa"]]},{"id":"3bc0c338.151e7c","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Update notification status","query":"{{{msg.updateNotification}}}\n","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":1127,"y":772,"wires":[[]]},{"id":"933de318.49aa","type":"function","z":"1e0e78d.ff1b387","name":"Return status","func":"msg.payload = msg.payload.rows[0].notification_on;\nreturn msg;","outputs":1,"noerr":0,"x":592,"y":745,"wires":[["5042c4c8.ea9acc"]]},{"id":"10d92052.b08f9","type":"comment","z":"1e0e78d.ff1b387","name":"Get data for selected sensor from PostgreSQL","info":"","x":446,"y":511,"wires":[]},{"id":"7f6b3ff9.42563","type":"comment","z":"1e0e78d.ff1b387","name":"Enable / Disable notification","info":"","x":396,"y":693,"wires":[]},{"id":"a5c3c788.b89fb8","type":"postgrestor","z":"1e0e78d.ff1b387","name":"Update availability","query":"-- UPDATE public.datasource SET availability = {{{msg.payload}}} WHERE datasource_id = {{{flow.get('dataSource').id}}};\n{{{msg.updateAvailability}}}\n","postgresDB":"b9b7fdd9.41f2f","output":true,"outputs":1,"x":910,"y":947,"wires":[[]]},{"id":"186ba5.d864645b","type":"comment","z":"1e0e78d.ff1b387","name":"== REMEMBER TO CONFIGURE PAYLOAD AND REPEAT PROPERTY OF INJECT NODE ==","info":"","x":670,"y":40,"wires":[]},{"id":"81bc1fab.3c8c4","type":"function","z":"1e0e78d.ff1b387","name":"Set dataSource","func":"flow.set('dataSource', msg.payload.dataSource);\nreturn msg;","outputs":1,"noerr":0,"x":123,"y":438,"wires":[["6ede5a48.be6524","dbfe0ceb.9b2","34ce89ac.40c226"]]},{"id":"e5a61935.71fcf8","type":"inject","z":"1e0e78d.ff1b387","name":"","topic":"","payload":"{\"dataSource\":{\"id\":1012}}","payloadType":"json","repeat":"21600","crontab":"","once":true,"x":90,"y":380,"wires":[["81bc1fab.3c8c4"]]},{"id":"483590d7.9551e","type":"function","z":"1e0e78d.ff1b387","name":"sqlRobot","func":"// Update robot status in PostgreSQL\nvar dataSource = flow.get('dataSource');\n\nmsg.updateRobotStarted = \"UPDATE public.datasource SET robot_started = \" + msg.payload +\n                         \" WHERE datasource_id = \" + dataSource.id + \";\";\n                         \n// Reset notification counter\nflow.set('mailSent', false);\n\n// Timestamp for when robot is started\nif(msg.payload){\n    flow.set('tsRobotStarted', Date.now());\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":993.5,"y":450.5999755859375,"wires":[["a108566b.690ec8"]]},{"id":"5a767e17.f972c","type":"function","z":"1e0e78d.ff1b387","name":"sqlNotify","func":"var dataSource = flow.get('dataSource');\n\nmsg.updateNotification = \"UPDATE public.datasource SET notification_on = \" + msg.payload +\n                         \" WHERE datasource_id = \" + dataSource.id + \";\";\n\nreturn msg;","outputs":1,"noerr":0,"x":936,"y":773,"wires":[["3bc0c338.151e7c"]]},{"id":"e9e5fdd0.0560b","type":"comment","z":"1e0e78d.ff1b387","name":"Flows to monitor functionality","info":"","x":160,"y":305,"wires":[]},{"id":"da255596.504248","type":"function","z":"1e0e78d.ff1b387","name":"Set dataSource","func":"flow.set('dataSource', msg.payload.dataSource);\nreturn msg;","outputs":1,"noerr":0,"x":126,"y":925,"wires":[["63ab972c.57d348","346550c0.d79eb"]]},{"id":"3c2cc2a.251763e","type":"inject","z":"1e0e78d.ff1b387","name":"","topic":"","payload":"{\"dataSource\":{\"id\":1012}}","payloadType":"json","repeat":"21600","crontab":"","once":true,"x":93,"y":867,"wires":[["da255596.504248"]]},{"id":"d857139.95c98f","type":"ui_group","z":"1e0e78d.ff1b387","name":"Krüger","tab":"f90e2404.5ddbc8","order":2,"disp":false,"width":"6"},{"id":"b9d336db.826ba8","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"b9b7fdd9.41f2f","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"f90e2404.5ddbc8","type":"ui_tab","z":"","name":"Krüger","icon":"dashboard","order":1},{"id":"99afa80b.4adec8","type":"tab","label":"Kruger devices to Kafka","disabled":false,"info":""},{"id":"1e4f39da.5550e6","type":"inject","z":"99afa80b.4adec8","name":"Import 18","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"35 18 * * *","once":false,"onceDelay":"","x":130.00006866455078,"y":512.000002861023,"wires":[["25d15395.a17bcc"]]},{"id":"640c996d.332708","type":"postgrestor","z":"99afa80b.4adec8","name":"Insert datasource","query":"INSERT INTO public.DATASOURCE (DATASOURCE_ID, NAME, URL, AUTHENTICATION_TYPE, DESCRIPTION, USERNAME, PASSWORD, UPDATED, DASHBOARD_URL)\nVALUES (\n  {{{ msg.payload.dataSource.id }}}, \n '{{{ msg.payload.dataSource.name }}}', \n '{{{ msg.payload.dataSource.url }}}', \n '{{{ msg.payload.dataSource.authentification.type }}}', \n '{{{ msg.payload.dataSource.description }}}',\n '{{{ msg.payload.dataSource.username }}}',\n '{{{ msg.payload.dataSource.password }}}',\n LOCALTIMESTAMP,\n '{{{ msg.payload.dataSource.dashboard.url }}}')\nON CONFLICT (DATASOURCE_ID) DO UPDATE\nSET\n   NAME = '{{{ msg.payload.dataSource.name }}}',\n   URL = '{{{ msg.payload.dataSource.url }}}',\n   AUTHENTICATION_TYPE = '{{{ msg.payload.dataSource.authentification.type }}}',\n   DESCRIPTION = '{{{ msg.payload.dataSource.description }}}',\n   USERNAME = '{{{ msg.payload.dataSource.username }}}',\n   PASSWORD = '{{{ msg.payload.dataSource.password }}}',\n   UPDATED = LOCALTIMESTAMP,\n   DASHBOARD_URL = '{{{ msg.payload.dataSource.dashboard.url }}}';\n","postgresDB":"a044933f.fee46","output":false,"outputs":1,"x":470,"y":380,"wires":[["e96976b9.6b0648"]]},{"id":"5e34f7e.8026d08","type":"postgrestor","z":"99afa80b.4adec8","name":"Create or update Sensor Objects","query":"-- Insert or Update Sensor Object\nINSERT INTO public.SENSOR_OBJECT (DATASOURCE_ID, SENSOR_OBJECT_ID, NAME, DESCRIPTION, UPDATED, LOCATION)\nVALUES (\n {{{ msg.dataSourceId }}}, \n'{{{ msg.nodeId }}}', \n'{{{ msg.name }}}', \n'{{{ msg.description }}}', \nLOCALTIMESTAMP,\n'{{{ msg.location }}}'\n)\nON CONFLICT (DATASOURCE_ID, SENSOR_OBJECT_ID) DO UPDATE\nSET\n   NAME = '{{{ msg.name }}}',\n   DESCRIPTION = '{{{ msg.description }}}',\n   UPDATED = LOCALTIMESTAMP,\n   LOCATION = '{{{ msg.location }}}';","postgresDB":"a044933f.fee46","output":false,"outputs":1,"x":1114.0000610351562,"y":584,"wires":[[]]},{"id":"c8d479ad.7e6d08","type":"postgrestor","z":"99afa80b.4adec8","name":"Create or update Sensor Object Nodes","query":"-- Insert or Update Sensor Object Nodes\nINSERT INTO public.sensor_object_nodes (\n    datasource_id, sensor_object_id, sensor_object_node_id, name, \n    description, datatype, nodedomain, readable, writeable, \"interval\", \n    updated, unit, nodetype)\nVALUES (\n     {{{ msg.dataSourceId }}}, \n    '{{{ msg.objectId }}}', \n    '{{{ msg.objectNodeId }}}', \n    '{{{ msg.name }}}', \n    '{{{ msg.description }}}', \n    '{{{ msg.dataType }}}', \n    '{{{ msg.nodeDomain }}}',\n     {{{ msg.readable }}}, \n     {{{ msg.writeable }}}, \n     {{{ msg.defaultInterval }}}, \n    LOCALTIMESTAMP,\n    '{{{ msg.unit }}}',\n     {{{ msg.nodeType }}}\n)\nON CONFLICT (DATASOURCE_ID, SENSOR_OBJECT_ID, SENSOR_OBJECT_NODE_ID) DO UPDATE\nSET\n   name = '{{{ msg.name }}}', \n   description = '{{{ msg.description }}}', \n   datatype = '{{{ msg.dataType }}}', \n   nodedomain = '{{{ msg.nodeDomain }}}',\n   readable = {{{ msg.readable }}}, \n   writeable = {{{ msg.writeable }}}, \n   \"interval\" = {{{ msg.defaultInterval }}}, \n   updated = LOCALTIMESTAMP,\n   unit = '{{{ msg.unit }}}',\n   nodetype = {{{ msg.nodeType }}};","postgresDB":"a044933f.fee46","output":true,"outputs":1,"x":1124.0000610351562,"y":635.0000610351562,"wires":[[]]},{"id":"8d448149.3bfd6","type":"comment","z":"99afa80b.4adec8","name":"Prepare and save metadata concerning Kruger Devices","info":"","x":229.00006103515625,"y":292,"wires":[]},{"id":"52a40af1.34a424","type":"delay","z":"99afa80b.4adec8","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":614.0000610351562,"y":727,"wires":[["255857f1.3d8c78"]]},{"id":"8e823370.88d5d","type":"function","z":"99afa80b.4adec8","name":"Prepare subscriptions","func":"if (msg.payload && msg.payload.rows && msg.payload.rows.length > 0 ) {\n    var _fileDate = msg.fileDate;\n    var _date = new Date();\n    \n    var _hourDiff = (Math.abs(_date.getTime() - _fileDate.getTime()))/(1000*60*60);\n    \n    if (_hourDiff < 2) {\n        var _topicValues = flow.get(\"topicValues_\" + msg.index + \"_\" + msg.fileNo);\n        \n        if(_topicValues[0]['ID'] === msg.payload.rows[msg.index].sensor_object_node_id){\n            for ( i = 0; i < _topicValues.length; i++ ) {\n        \n                var _msg = {};\n                _msg.key = msg.payload.rows[msg.index].sensor_object_node_key;\n                _msg.nodeId = msg.payload.rows[msg.index].sensor_object_node_id;\n                _msg.interval = msg.payload.rows[msg.index].interval;\n                \n                if(_topicValues[i]) {\n                    \n                    // Prepare payload for Kafka\n                    _msg.payload = {\n                        timestamp: (new Date(_topicValues[i].Date)).getTime(),\n                        hepwatDeviceId: _msg.key,\n                        value: parseFloat(_topicValues[i].Level),\n                        interval: _msg.interval\n                    };\n            \n                    node.send(_msg);\n                }\n            }\n        } else {\n            node.error(\"Topic flow ID does not match sensor object node id for: \", _topicValues[0]['ID']);\n        }\n    }\n}\n\nreturn null;","outputs":1,"noerr":0,"x":801.0000610351562,"y":832,"wires":[["c4624ebc.05608"]]},{"id":"31ca9df1.cabd12","type":"postgrestor","z":"99afa80b.4adec8","name":"Query Sensor Object Nodes","query":"SELECT sensor_object_node_id, sensor_object_node_key, datatype, \"interval\", nodedomain\nFROM public.sensor_object_nodes\nWHERE (datasource_id = {{{ msg.dataSource.id }}}) AND (readable = true);","postgresDB":"a044933f.fee46","output":true,"outputs":1,"x":1041.0000610351562,"y":727,"wires":[["8e823370.88d5d"]]},{"id":"3efa431b.b19f4c","type":"sagofonto-kafka-producer","z":"99afa80b.4adec8","kafkaHost":"localhost:9092","connectTimeout":"10000","requestTimeout":"30000","requireAcks":"1","ackTimeoutMs":"100","partitionerType":"3","topicName":"raw-test-10","compressionOption":"0","x":1202.000244140625,"y":832,"wires":[[]]},{"id":"d9279b77.2a43a8","type":"catch","z":"99afa80b.4adec8","name":"","scope":null,"x":121.10001754760742,"y":958.8001079559326,"wires":[["1ab12f3c.271a01"]]},{"id":"e7aece26.a1e38","type":"function","z":"99afa80b.4adec8","name":"Prepare error email","func":"var outMsg = {\n    to: 'mail@to.dk',\n    from: 'mail@from.dk',\n    topic: 'Error in Node-Red flow: Kruger devices to Kafka',\n};\n\nif(msg.error && msg.error.message){\n    outMsg.payload = '<p style=\"font-family: Trebuchet MS;\">The following error was thrown:</p>';\n    outMsg.payload += '<p style=\"font-family: Trebuchet MS;\">' + msg.error.message + '</p>';\n    if(msg.error.source){\n        outMsg.payload += '<p style=\"font-family: Trebuchet MS;\"><b>Source:</b>';\n        if(msg.error.source.id) outMsg.payload +=   '<li style=\"font-family: Trebuchet MS;\">Id: ' + msg.error.source.id + '</li>';\n        if(msg.error.source.type) outMsg.payload += '<li style=\"font-family: Trebuchet MS;\">Type: ' + msg.error.source.type + '</li>';\n        if(msg.error.source.name) outMsg.payload += '<li style=\"font-family: Trebuchet MS;\">Name: ' + msg.error.source.name + '</li>';\n        outMsg.payload += '</p>';\n    }\n    outMsg.payload += '<p><a href=\"http://localhost:1901\" target=\"_blank\">Goto flow...</a></p>';\n}\n\nreturn outMsg;","outputs":1,"noerr":0,"x":320.1000213623047,"y":958.5999736785889,"wires":[["7148c8c3.d7aad8"]]},{"id":"7148c8c3.d7aad8","type":"e-mail","z":"99afa80b.4adec8","server":"localhost","port":"25","secure":false,"name":"","dname":"Send error mail","x":540,"y":958,"wires":[]},{"id":"ac31bbc6.bb2ed8","type":"comment","z":"99afa80b.4adec8","name":"Logging and error handling","info":"","x":151.00006103515625,"y":876,"wires":[]},{"id":"606171d2.9a669","type":"comment","z":"99afa80b.4adec8","name":"Read topics from database and produce data for Kruger Devices","info":"","x":271.00006103515625,"y":689,"wires":[]},{"id":"7a55ef78.a0142","type":"sagofonto-log-backup","z":"99afa80b.4adec8","name":"","sourcePath":"/usr/src/node-red/","sourceFilename":"hepwat.log","destPath":"/usr/src/node-red/logs/","x":323,"y":1019,"wires":[[]]},{"id":"9d04ccfb.fdbf5","type":"inject","z":"99afa80b.4adec8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 02 * * 1,3,5,0","once":false,"onceDelay":"","x":133,"y":1019,"wires":[["7a55ef78.a0142"]]},{"id":"c4624ebc.05608","type":"subflow:1e0e78d.ff1b387","z":"99afa80b.4adec8","name":"","x":1000,"y":832,"wires":[["b67817ee.74b418","6d1d2cde.38f9b4","3efa431b.b19f4c"]]},{"id":"90576a2a.bf5638","type":"csv to json ext","z":"99afa80b.4adec8","name":"","version":"0.1","source":"filename","delimiter":"\t","quote":" ","escape":" ","ignoreEmpty":false,"checkType":false,"trim":false,"noheader":false,"includeColumns":"","headers":"\"Date\", \"ID\", \"Level\"","debug":false,"x":388.00006103515625,"y":584,"wires":[["2f052fe3.dab4e"]]},{"id":"25d15395.a17bcc","type":"function","z":"99afa80b.4adec8","name":"Set file names","func":"// Send ftp file information to next node\nfor (i = 0; i < 4; i++) {\n    for( j = 1; j < 3; j++){\n        var _filename = flow.get(\"ftpFile_\" + i + \"_\" + j);\n        var _fileDate = flow.get(\"ftpFileDate_\" + i + \"_\" + j);\n        \n        node.send({\n            index: i,\n            fileNo: j,\n            filename: _filename,\n            fileDate: _fileDate\n        });\n    }\n}\n\nreturn null;\n\n","outputs":1,"noerr":0,"x":208.00006103515625,"y":584,"wires":[["ac99259f.9b7c38","90576a2a.bf5638"]]},{"id":"598f6c8c.b5b354","type":"function","z":"99afa80b.4adec8","name":"Create Sensor Object Nodes","func":"var _dataSource = flow.get('dataSource');\nvar _measurementType = flow.get('measurementType');\n\nfor ( i = 0; i < 1; i++ ) {\n  \n    node.send({\n        dataSourceId: _dataSource.id,\n        objectId: msg.payload[i][\"ID\"],\n        objectNodeId: msg.payload[i][\"ID\"],\n        name: msg.payload[i][\"ID\"],\n        description: msg.payload[i][\"ID\"],\n        dataType: \"integer\",\n        //nodeTypeOld: \"water_level\",\n        nodeDomain: \"\",\n        readable: true,\n        writeable: false,\n        defaultInterval: _dataSource.defaultInterval,\n        unit: \"mm\",\n        nodeType: _measurementType['Vandniveau']\n    });\n}\n\nreturn null;","outputs":1,"noerr":0,"x":821.0000610351562,"y":635,"wires":[["c8d479ad.7e6d08"]]},{"id":"255857f1.3d8c78","type":"function","z":"99afa80b.4adec8","name":"Get Data Source","func":"var dataSource = flow.get('dataSource');\nmsg.dataSource = dataSource;\n\nreturn msg;","outputs":1,"noerr":0,"x":791.5000610351562,"y":727.5999755859375,"wires":[["31ca9df1.cabd12"]]},{"id":"7ba20714.9feb38","type":"function","z":"99afa80b.4adec8","name":"Create Sensor Object","func":"var dataSource = flow.get('dataSource');\nvar i;\n\nfor ( i = 0; i < 1; i++ ) {\n    // Manually add metadata for sensor object\n    var _description;\n    switch(msg.payload[i][\"ID\"]) {\n        case \"IJA0101-00001153\":\n            _description = \"Målernr: 1153. Brøndnr: 201F043. Placering: Langs med åen\";\n            break;\n        case \"IJA0101-00001154\":\n            _description = \"Målernr: 1154. Brøndnr: 202F040. Placering: Ved skole/hal\";\n            break;\n        case \"IJA0101-00001155\":\n            _description = \"Målernr: 1155. Brøndnr: 201F091. Placering: Opstrøms fodboldbane\";\n            break;\n        case \"IJA0101-00005219\":\n            _description = \"Målernr: 5219. Brøndnr.: 122S090. Placering: Villavej\";\n            break;\n    }\n    node.send({\n        dataSourceId: dataSource.id,\n        nodeId: msg.payload[i][\"ID\"],\n        old_name: msg.payload[i][\"ID\"],\n        name: _description,\n        description: _description\n    });\n}\n\nreturn null;\n","outputs":1,"noerr":0,"x":800.5000610351562,"y":583.6000061035156,"wires":[["5e34f7e.8026d08"]]},{"id":"d96e9efc.c3291","type":"comment","z":"99afa80b.4adec8","name":"Ftp download files concerning Kruger Devices","info":"","x":198,"y":53,"wires":[]},{"id":"17d3e77c.a8f8a9","type":"inject","z":"99afa80b.4adec8","name":"Download 00","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"30 00 * * *","once":false,"onceDelay":"","x":132.5,"y":111.30000305175781,"wires":[["152738a1.6ef6c7"]]},{"id":"152738a1.6ef6c7","type":"function","z":"99afa80b.4adec8","name":"Define server paths","func":"// Set paths on remote server for file listing\n\nnode.send({index: 0, serverPath: '/IJA0101-00001153/DATA/'});\nnode.send({index: 1, serverPath: '/IJA0101-00001154/DATA/'});\nnode.send({index: 2, serverPath: '/IJA0101-00001155/DATA/'});\nnode.send({index: 3, serverPath: '/IJA0101-00005219/DATA/'});\n\nreturn null;","outputs":1,"noerr":0,"x":342.5,"y":111.59999084472656,"wires":[["259fb277.27c1be"]]},{"id":"86e6e549.32e458","type":"sagofonto_ftp in","z":"99afa80b.4adec8","sagofonto_ftp":"85eddfb6.a22c8","operation":"list","filename":"","localFilename":"","serverPath":"","name":"FTP List","x":661.5,"y":111.66000366210938,"wires":[["54b40d78.ee2c64"]]},{"id":"259fb277.27c1be","type":"delay","z":"99afa80b.4adec8","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"2","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":517.5,"y":147.59999084472656,"wires":[["86e6e549.32e458"]]},{"id":"54b40d78.ee2c64","type":"function","z":"99afa80b.4adec8","name":"Latest files","func":"// Determine latest files possible to download\n\nfor (i=1; i<3; i++){\n    var _lastIndex = msg.payload.length - i;\n    var _lastFileName = msg.payload[_lastIndex].name;\n    var _lastFileDate = msg.payload[_lastIndex].date;\n    \n    // Correct ftp timestamp if daylight time savings is active\n    if(_lastFileDate.getTimezoneOffset() == -120){\n        _lastFileDate.setTime(_lastFileDate.getTime() + (2*60*60*1000));\n    } else if(_lastFileDate.getTimezoneOffset() == -60){\n        _lastFileDate.setTime(_lastFileDate.getTime() + (1*60*60*1000));\n    }\n    \n    var _filename = msg.serverPath + _lastFileName;\n    var _localFilename = '/usr/src/node-red/ftp_files' + _filename;\n    \n    node.send({\n        index: msg.index,\n        fileNo: i,\n        filename: _filename,\n        fileDate: _lastFileDate,\n        localFilename: _localFilename\n    });\n}\n\nreturn null;","outputs":1,"noerr":0,"x":796,"y":146,"wires":[["436aa571.f3b1dc"]]},{"id":"ea9d307c.b4e7c","type":"sagofonto_ftp in","z":"99afa80b.4adec8","sagofonto_ftp":"85eddfb6.a22c8","operation":"get","filename":"","localFilename":"","serverPath":"","name":"FTP Get","x":1098,"y":145,"wires":[["57bd4478.d656ac"]]},{"id":"57bd4478.d656ac","type":"function","z":"99afa80b.4adec8","name":"Save names","func":"flow.set(\"ftpFile_\" + msg.index + \"_\" + msg.fileNo, msg.localFilename);\nflow.set(\"ftpFileDate_\" + msg.index + \"_\" + msg.fileNo, msg.fileDate);\n\nnode.log(\"Downloaded: \" + msg.filename);\n\nmsg.payload = flow.get(\"ftpFile_\" + msg.index + \"_\" + msg.fileNo);\n\nreturn msg;","outputs":1,"noerr":0,"x":1235.0999755859375,"y":112.19999694824219,"wires":[["87bf42b9.19aa7"]]},{"id":"87bf42b9.19aa7","type":"debug","z":"99afa80b.4adec8","name":"","active":true,"console":"false","complete":"true","x":1363.0999755859375,"y":143,"wires":[]},{"id":"b67817ee.74b418","type":"debug","z":"99afa80b.4adec8","name":"","active":false,"console":"false","complete":"true","x":1179,"y":888,"wires":[]},{"id":"2f052fe3.dab4e","type":"function","z":"99afa80b.4adec8","name":"Set topic values","func":"flow.set('topicValues_' + msg.index + '_' + msg.fileNo, msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":567.0000610351562,"y":584,"wires":[["52a40af1.34a424","7ba20714.9feb38","598f6c8c.b5b354"]]},{"id":"e681bd1b.310da","type":"inject","z":"99afa80b.4adec8","name":"Download 06","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"30 06 * * *","once":false,"onceDelay":"","x":133,"y":150,"wires":[["152738a1.6ef6c7"]]},{"id":"71d50d9b.403264","type":"inject","z":"99afa80b.4adec8","name":"Download 12","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"30 12 * * *","once":false,"onceDelay":"","x":134,"y":188,"wires":[["152738a1.6ef6c7"]]},{"id":"fc10dee5.290b3","type":"inject","z":"99afa80b.4adec8","name":"Download 18","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"30 18 * * *","once":false,"onceDelay":"","x":135,"y":226,"wires":[["152738a1.6ef6c7"]]},{"id":"8d51b001.f5bd7","type":"inject","z":"99afa80b.4adec8","name":"Import 12","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"35 12 * * *","once":false,"onceDelay":"","x":130.00006103515625,"y":473,"wires":[["25d15395.a17bcc"]]},{"id":"6e1e63ad.85235c","type":"inject","z":"99afa80b.4adec8","name":"Import 06","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"35 06 * * *","once":false,"onceDelay":"","x":130.00006103515625,"y":434,"wires":[["25d15395.a17bcc"]]},{"id":"68ffe486.4b6b5c","type":"inject","z":"99afa80b.4adec8","name":"Import 00","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"35 00 * * *","once":false,"onceDelay":"","x":129,"y":396,"wires":[["25d15395.a17bcc"]]},{"id":"6d1d2cde.38f9b4","type":"file","z":"99afa80b.4adec8","name":"Kafka data","filename":"/usr/src/node-red/kafka.dat","appendNewline":true,"createDir":false,"overwriteFile":"false","x":1200.0999755859375,"y":940.6000366210938,"wires":[]},{"id":"5fc54f4d.0a1bd","type":"function","z":"99afa80b.4adec8","name":"File to delete","func":"var _fullPathToFile = msg.filename;\nvar _fileName = _fullPathToFile.split(\"/\");\n_fileName = _fileName[_fileName.length - 1];\n    \nvar _fullPath = _fullPathToFile.split(\"/\");\nvar _filePath = \"\";\n\nfor(i = 0; i < _fullPath.length - 1; i++){\n    _filePath = _filePath + _fullPath[i] + \"/\";\n}\n\nmsg.file = _fileName;\nmsg.path = _filePath;\n\nreturn msg;","outputs":1,"noerr":0,"x":1287.1000137329102,"y":726.2000141143799,"wires":[["eb03e60f.4e4468"]]},{"id":"eb03e60f.4e4468","type":"fs-ops-delete","z":"99afa80b.4adec8","name":"Do Delete","path":"path","pathType":"msg","filename":"file","filenameType":"msg","x":1438.1000213623047,"y":725.8000106811523,"wires":[[]]},{"id":"436aa571.f3b1dc","type":"delay","z":"99afa80b.4adec8","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"2","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":952,"y":112,"wires":[["ea9d307c.b4e7c"]]},{"id":"ac99259f.9b7c38","type":"debug","z":"99afa80b.4adec8","name":"","active":false,"console":"false","complete":"true","x":368.1000061035156,"y":631,"wires":[]},{"id":"1ab12f3c.271a01","type":"file","z":"99afa80b.4adec8","name":"","filename":"/usr/src/node-red/catch.log","appendNewline":true,"createDir":false,"overwriteFile":"false","x":350,"y":920,"wires":[]},{"id":"e96976b9.6b0648","type":"postgrestor","z":"99afa80b.4adec8","name":"Query measurement type","query":"SELECT * FROM config_measurement_type;","postgresDB":"d4e61502.7cfd18","output":true,"outputs":1,"x":672,"y":344,"wires":[["620d44d7.1f9edc"]]},{"id":"620d44d7.1f9edc","type":"function","z":"99afa80b.4adec8","name":"Set measurement type","func":"var _measurementType = {};\n\nfor(i=0; i<msg.payload.rows.length; i++){\n    _measurementType[msg.payload.rows[i].name] = msg.payload.rows[i].id;\n}\n\nmsg.measurementType = _measurementType;\n\nflow.set(\"measurementType\", _measurementType);\n\nreturn msg;\n//return null;","outputs":1,"noerr":0,"x":881,"y":380,"wires":[["2154d839.e66198"]]},{"id":"2154d839.e66198","type":"debug","z":"99afa80b.4adec8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":1030,"y":344,"wires":[]},{"id":"da0f7e56.9d9e7","type":"inject","z":"99afa80b.4adec8","name":"Datasource","topic":"","payload":"{\"dataSource\":{\"id\":1012,\"name\":\"Krüger Level Devices\",\"url\":\"localhost\",\"description\":\"Krüger Level Devices\",\"username\":\"xxxxxxx\",\"password\":\"xxxxxx\",\"authentification\":{\"type\":\"Basic\"},\"rootTopic\":\"\",\"defaultInterval\":43200000,\"dashboard\":{\"url\":\"http://localhost:1901/ui\"}}}","payloadType":"json","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":130,"y":344,"wires":[["315cb35f.1ab50c"]]},{"id":"315cb35f.1ab50c","type":"function","z":"99afa80b.4adec8","name":"Set Datasource","func":"// Set flow variable\nflow.set('dataSource', msg.payload.dataSource);\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":300,"y":344,"wires":[["640c996d.332708"]]},{"id":"a044933f.fee46","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"},{"id":"85eddfb6.a22c8","type":"sagofonto_ftp","z":"","host":"52.58.208.39","port":"","secureOptions":"","user":"artogis","connTimeout":"","pasvTimeout":"","keepalive":""},{"id":"d4e61502.7cfd18","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"1000"}]