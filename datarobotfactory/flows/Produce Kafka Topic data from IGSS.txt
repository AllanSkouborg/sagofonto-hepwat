[{"id":"9db725b9.2e47d8","type":"subflow","name":"robot monitor 6","info":"","in":[{"x":60.60003662109375,"y":199.60000610351562,"wires":[{"id":"b9c2cfe0.0b0da"}]}],"out":[{"x":634,"y":180,"wires":[{"id":"b47b7012.753be","port":0}]}]},{"id":"b9c2cfe0.0b0da","type":"switch","z":"9db725b9.2e47d8","name":"Is this flow enabled?","property":"start-stop","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":260,"y":200,"wires":[["b0e26b.a51c0d98","b47b7012.753be"]]},{"id":"904dfbf8.679508","type":"ui_switch","z":"9db725b9.2e47d8","name":"","label":"Stop/Start Robot:","group":"b6bc3661.91cb78","order":6,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":790,"y":438,"wires":[["c78491f9.dbd9c","90eab612.ce0218"]]},{"id":"c78491f9.dbd9c","type":"change","z":"9db725b9.2e47d8","name":"Enable / Disable this flow","rules":[{"t":"set","p":"start-stop","pt":"flow","to":"payload","tot":"msg"},{"t":"set","p":"emailSent","pt":"global","to":"0","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":1043,"y":407,"wires":[[]]},{"id":"3601a6c9.7f1f2a","type":"ui_gauge","z":"9db725b9.2e47d8","name":"Operating Sensors","group":"b6bc3661.91cb78","order":1,"width":0,"height":0,"gtype":"gage","title":"{{msg.gaugeLabel}}","label":"%","format":"{{msg.availableSensors}}","min":0,"max":"100","colors":["#ca3838","#e6e600","#00b500"],"seg1":"33","seg2":"66","x":910,"y":979,"wires":[]},{"id":"7038d078.8eba3","type":"ui_text","z":"9db725b9.2e47d8","group":"b6bc3661.91cb78","order":4,"width":0,"height":0,"name":"","label":"Last Run:","format":"{{msg.lastrun}}","layout":"row-spread","x":1291,"y":565,"wires":[]},{"id":"b2fc3848.3cd528","type":"comment","z":"9db725b9.2e47d8","name":"Flow to monitor robot","info":"","x":140,"y":129,"wires":[]},{"id":"81fa6eb9.4af1","type":"comment","z":"9db725b9.2e47d8","name":"Stop / Start robot monitor","info":"","x":385,"y":377,"wires":[]},{"id":"a793b07f.a41d1","type":"comment","z":"9db725b9.2e47d8","name":"Calculate percentage of operating sensors","info":"","x":433,"y":937,"wires":[]},{"id":"497adc55.2c6204","type":"comment","z":"9db725b9.2e47d8","name":"Flow for logging and error handling","info":"","x":180,"y":1381,"wires":[]},{"id":"6352be25.007e","type":"switch","z":"9db725b9.2e47d8","name":"Is notification enabled?","property":"notification","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":309.00000381469727,"y":1436,"wires":[["eaedab1.ece4f58"]]},{"id":"b3b07c58.ecc3d","type":"ui_switch","z":"9db725b9.2e47d8","name":"Notification","label":"Notification:","group":"b6bc3661.91cb78","order":7,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":770,"y":745,"wires":[["618f06e9.7c0e78","57a8ca09.069b44"]]},{"id":"618f06e9.7c0e78","type":"change","z":"9db725b9.2e47d8","name":"Enable / Disable notification","rules":[{"t":"set","p":"notification","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":996,"y":718,"wires":[[]]},{"id":"86a1a7c1.70f438","type":"catch","z":"9db725b9.2e47d8","name":"","scope":null,"x":101.00000381469727,"y":1436,"wires":[["6352be25.007e"]]},{"id":"b4d242a6.e5a72","type":"e-mail","z":"9db725b9.2e47d8","server":"localhost","port":"25","secure":false,"name":"","dname":"Send error mail","x":781.0000038146973,"y":1436,"wires":[]},{"id":"eaedab1.ece4f58","type":"function","z":"9db725b9.2e47d8","name":"Prepare error email","func":"// Only create one user notification\nif(flow.get('mailSent')){\n    return null;\n} else {\n\n    msg.to = 'mail@to.dk';\n    msg.from = 'mail@from.dk';\n    msg.topic = 'Error in robot monitor for flow: Produce Kafka Topic data from IGSS';\n    \n    if(msg.error && msg.error.message){\n        msg.payload = '<p style=\"font-family: Trebuchet MS;\">The following error was thrown:</p>';\n        msg.payload += '<p style=\"font-family: Trebuchet MS;\">' + msg.error.message + '</p>';\n        if(msg.error.source){\n            msg.payload += '<p style=\"font-family: Trebuchet MS;\"><b>Source:</b>';\n            if(msg.error.source.id) msg.payload +=   '<li style=\"font-family: Trebuchet MS;\">Id: ' + msg.error.source.id + '</li>';\n            if(msg.error.source.type) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Type: ' + msg.error.source.type + '</li>';\n            if(msg.error.source.name) msg.payload += '<li style=\"font-family: Trebuchet MS;\">Name: ' + msg.error.source.name + '</li>';\n            msg.payload += '</p>';\n        }\n        msg.payload += '<p><a href=\"http://localhost:1896/ui\" target=\"_blank\">Goto dashboard...</a></p>';\n    }\n    flow.set('mailSent', true);\n    return msg;\n}","outputs":1,"noerr":0,"x":559.0000038146973,"y":1436,"wires":[["b4d242a6.e5a72"]]},{"id":"533a45c.08670bc","type":"ui_text","z":"9db725b9.2e47d8","group":"b6bc3661.91cb78","order":3,"width":0,"height":0,"name":"","label":"Interval:","format":"{{msg.interval}}","layout":"row-spread","x":1292,"y":522,"wires":[]},{"id":"9aeeeb58.49c228","type":"http in","z":"9db725b9.2e47d8","name":"","url":"/igss_log","method":"get","upload":false,"swaggerDoc":"","x":108.00000381469727,"y":1563,"wires":[["8456575f.3c73b8"]]},{"id":"432a552f.950eec","type":"http response","z":"9db725b9.2e47d8","name":"","statusCode":"","headers":{},"x":762.0000038146973,"y":1563,"wires":[]},{"id":"8456575f.3c73b8","type":"file in","z":"9db725b9.2e47d8","name":"","filename":"/usr/src/node-red/hepwat.log","format":"utf8","chunk":false,"sendError":false,"x":368.00000381469727,"y":1563,"wires":[["a5b8306b.7013c"]]},{"id":"a5b8306b.7013c","type":"function","z":"9db725b9.2e47d8","name":"Format log data","func":"msg.payload = msg.payload.replace(/\\n/gm,'<br>');\nreturn msg;","outputs":1,"noerr":0,"x":599.0000038146973,"y":1563,"wires":[["432a552f.950eec"]]},{"id":"71f65bb2.c878a4","type":"comment","z":"9db725b9.2e47d8","name":"Flow for viewing log file","info":"","x":138.00000381469727,"y":1514,"wires":[]},{"id":"b0e26b.a51c0d98","type":"postgrestor","z":"9db725b9.2e47d8","name":"Update Last Run","query":"-- Update last run for Sensor Object Nodes\n-- UPDATE public.sensor_object_nodes SET lastrun = to_timestamp({{{msg.payload.timestamp}}} * 0.001) WHERE (sensor_object_node_key = {{{msg.payload.hepwatDeviceId}}});\n\n{{{msg.updateLastRun}}}\n","postgresDB":"348a3d06.711442","output":true,"outputs":1,"x":503,"y":228,"wires":[[]]},{"id":"b47b7012.753be","type":"function","z":"9db725b9.2e47d8","name":"Cleanup","func":"delete msg.updateLastRun;\nreturn msg;","outputs":1,"noerr":0,"x":474,"y":180,"wires":[[]]},{"id":"f595ceee.abf5f","type":"postgrestor","z":"9db725b9.2e47d8","name":"Select last run data","query":"SELECT sensor_object_node_key, interval, lastrun \nFROM public.sensor_object_nodes \nWHERE datasource_id = {{{msg.payload.dataSource.id}}};","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":364,"y":1162,"wires":[["fa1ab20.37e8d5"]]},{"id":"fa1ab20.37e8d5","type":"function","z":"9db725b9.2e47d8","name":"Determine node status","func":"var StatusEnum = {\n    STATUS_OPERATING: 'Operating',\n    STATUS_STOPPED: 'Stopped',\n    STATUS_NO_SIGNAL: 'No signal'\n};\n\nvar i = 0;\nvar _updateStatus = '';\n\nfor ( i = 0; i < msg.payload.rows.length; i++ ) {\n  var _sensor_object_node_key = msg.payload.rows[i].sensor_object_node_key;\n  //var _interval = msg.payload.rows[i].interval;\n  var _interval = 80000;    // Test interval i milli sekunder, EMA 09-03-2018\n  var _now = new Date().getTime();\n  var _status = null;\n  var _lastrun = null;\n  \n  if(msg.payload.rows[i].lastrun){\n      _lastrun = msg.payload.rows[i].lastrun.getTime()\n  }\n  \n  if(_lastrun){\n    var _timediff = _now - _lastrun;\n    if(_timediff < 2 * _interval){\n      _status = StatusEnum.STATUS_OPERATING;\n    }\n    else{\n      _status = StatusEnum.STATUS_STOPPED;\n    }\n  }\n  else{\n    _status = StatusEnum.STATUS_NO_SIGNAL;\n  }\n  _updateStatus += \"UPDATE public.sensor_object_nodes SET status = '\" + _status  + \"' WHERE (sensor_object_node_key = \" + _sensor_object_node_key + \");\"; \n}\n\nmsg.updateStatus = _updateStatus;\n\nreturn msg;","outputs":1,"noerr":0,"x":586,"y":1162,"wires":[["a44ed2c1.ec3d4"]]},{"id":"a44ed2c1.ec3d4","type":"postgrestor","z":"9db725b9.2e47d8","name":"Update node status","query":"{{{msg.updateStatus}}}\n","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":816,"y":1162,"wires":[[]]},{"id":"8059e2.ff61462","type":"postgrestor","z":"9db725b9.2e47d8","name":"Query Sensor Data","query":"{{{msg.sqlStatements}}}","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":549,"y":998,"wires":[["bd4facc.856b95"]]},{"id":"fd4acafd.09a668","type":"function","z":"9db725b9.2e47d8","name":"Get sensor data","func":"var i;\nvar sqlStatements = '';\n\n// Count number of operating sensors\nsqlStatements = \"SELECT count(*) FROM public.sensor_object_nodes WHERE datasource_id = \" + msg.payload.dataSource.id + \" AND status = 'Operating';\";\n\n// Count total number of sensors\nsqlStatements += \"SELECT count(*) FROM public.sensor_object_nodes WHERE datasource_id = \" + msg.payload.dataSource.id + \";\";     \n\nmsg.sqlStatements = sqlStatements;\n\nreturn msg;\n","outputs":1,"noerr":0,"x":354,"y":998,"wires":[["8059e2.ff61462"]]},{"id":"bd4facc.856b95","type":"function","z":"9db725b9.2e47d8","name":"Calculate","func":"var allSensors = msg.payload.rows[1].count;\nvar operatingSensors = msg.payload.rows[0].count;\nvar availableSensors;\nvar dataSource = flow.get('dataSource');\n\nif(allSensors && allSensors > 0 ){\n    availableSensors = Math.round((operatingSensors / allSensors) * 100);\n    if(availableSensors === 0){\n        secondsAlive = (Date.now() - flow.get('tsRobotStarted')) * 0.001;\n        // node.log(\"secondsAlive = \" + secondsAlive.toFixed(2));\n        if(secondsAlive > 8){\n            node.error(\"No operating sensors are available!\", msg);\n        }\n    }\n}\n\nmsg.gaugeLabel = \"Operating Sensors \" + operatingSensors + \":\" + allSensors; \nmsg.availableSensors = availableSensors;\nmsg.payload = availableSensors;\n\nmsg.updateAvailability = \"UPDATE public.datasource SET availability = \" + msg.payload +\n                         \"WHERE datasource_id = \" + dataSource.id + \";\";\n                         \nreturn msg;\n","outputs":1,"noerr":0,"x":724,"y":998,"wires":[["3601a6c9.7f1f2a","c549302e.f18be"]]},{"id":"8d507665.a1b2e8","type":"postgrestor","z":"9db725b9.2e47d8","name":"Query Sensor Object Nodes","query":"SELECT sensor_object_node_key, name, description, status \nFROM public.sensor_object_nodes \nWHERE datasource_id = {{{msg.payload.dataSource.id}}} ORDER BY sensor_object_node_key;","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":394,"y":566,"wires":[["369800ee.d7db5"]]},{"id":"369800ee.d7db5","type":"function","z":"9db725b9.2e47d8","name":"Device list","func":"var sensors = [];\nvar i;\nvar jsonText = \"\";\n\nfor ( i = 0; i < msg.payload.rows.length; i++ ) {\n  var _sensor_object_node_key = msg.payload.rows[i].sensor_object_node_key;\n  var _name = msg.payload.rows[i].name;\n  var _description = msg.payload.rows[i].description;\n  var _status = msg.payload.rows[i].status;\n  var data = _sensor_object_node_key;\n  var elem = {};\n  var label;\n  \n  label = _sensor_object_node_key + \" : \" + _description;\n  \n  elem[label] =  data;\n  sensors.push(elem);\n}\n\nmsg.options = sensors;\nreturn msg;","outputs":1,"noerr":0,"x":572,"y":612,"wires":[["5e465d29.9c0114"]]},{"id":"d451164e.c10ed8","type":"postgrestor","z":"9db725b9.2e47d8","name":"Select operation data","query":"select interval, lastrun, status, sensor_log from public.sensor_object_nodes\nwhere sensor_object_node_key = {{{msg.payload}}};","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":894,"y":613,"wires":[["4101e318.165f8c","d81a6146.a04f"]]},{"id":"d67ccb68.4a0468","type":"comment","z":"9db725b9.2e47d8","name":"Update sensor status in PostgreSQL","info":"","x":416,"y":1108,"wires":[]},{"id":"e74a6e74.df7b8","type":"ui_text","z":"9db725b9.2e47d8","group":"b6bc3661.91cb78","order":5,"width":0,"height":0,"name":"","label":"Sensor Status:","format":"{{msg.status}}","layout":"row-spread","x":1311,"y":605,"wires":[]},{"id":"5e465d29.9c0114","type":"ui_dropdown","z":"9db725b9.2e47d8","name":"Dropdown","label":"","place":"Select sensor...","group":"b6bc3661.91cb78","order":2,"width":0,"height":0,"passthru":false,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"","x":704.5,"y":565.6499633789062,"wires":[["d451164e.c10ed8","27e0f152.f4c68e"]]},{"id":"4101e318.165f8c","type":"function","z":"9db725b9.2e47d8","name":"Change format","func":"msg.interval = \"\";\nmsg.lastrun = \"\";\nmsg.status = \"\";\n\nif(msg.payload.rows[0].interval && msg.payload.rows[0].interval > 0){\n    var interval = msg.payload.rows[0].interval;  // interval in milliseconds\n    var time;\n    var unit;\n\n    if (0 < interval && interval <= 60000){                // convert interval to seconds\n      time = interval / 1000;\n      unit = \" [sec]\";    \n    } else if (60000 < interval && interval <= 3600000) {  // convert interval to minutes\n      time = interval / 1000 / 60;\n      unit = \" [min]\";\n    } else if (3600000 < interval) {                       // convert interval to hours\n      time = interval / 1000 / 60 / 60;\n      unit = \" [hour]\";\n    } else {\n      time = \"\";\n      unit = \" [-]\";\n    }\n    \n    msg.interval = time + unit;\n}\nif(msg.payload.rows[0].lastrun){\n    //var localDate = msg.payload.rows[0].lastrun.toISOString();\n    var localDate = msg.payload.rows[0].lastrun.toLocaleString();\n    msg.lastrun = localDate;\n}\nif(msg.payload.rows[0].status){\n    msg.status = msg.payload.rows[0].status;\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1103,"y":566,"wires":[["7038d078.8eba3","533a45c.08670bc","e74a6e74.df7b8"]]},{"id":"45055407.bc0d3c","type":"postgrestor","z":"9db725b9.2e47d8","name":"Select robot started data","query":"SELECT robot_started FROM public.datasource WHERE datasource_id = {{{msg.payload.dataSource.id}}}","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":384,"y":438,"wires":[["33dc341a.e6925c"]]},{"id":"73fce3dd.1d5eec","type":"postgrestor","z":"9db725b9.2e47d8","name":"Update robot status","query":"--UPDATE public.datasource \n--SET robot_started = {{{msg.payload}}} \n--WHERE datasource_id = {{{flow.get('dataSource').id}}};\n\n{{{msg.updateRobotStarted}}}","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":1162,"y":451,"wires":[[]]},{"id":"33dc341a.e6925c","type":"function","z":"9db725b9.2e47d8","name":"Return status","func":"msg.payload = msg.payload.rows[0].robot_started;\nreturn msg;","outputs":1,"noerr":0,"x":592,"y":438,"wires":[["904dfbf8.679508"]]},{"id":"a8ac2972.ac72b8","type":"postgrestor","z":"9db725b9.2e47d8","name":"Query notification status","query":"SELECT notification_on \nFROM public.datasource \nWHERE datasource_id = {{{msg.payload.dataSource.id}}};","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":385,"y":745,"wires":[["27b986e2.1d7cfa"]]},{"id":"8ac777ae.237d78","type":"postgrestor","z":"9db725b9.2e47d8","name":"Update notification status","query":"{{{msg.updateNotification}}}\n","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":1127,"y":772,"wires":[[]]},{"id":"27b986e2.1d7cfa","type":"function","z":"9db725b9.2e47d8","name":"Return status","func":"msg.payload = msg.payload.rows[0].notification_on;\nreturn msg;","outputs":1,"noerr":0,"x":592,"y":745,"wires":[["b3b07c58.ecc3d"]]},{"id":"7256377e.f196b8","type":"comment","z":"9db725b9.2e47d8","name":"Get data for selected sensor from PostgreSQL","info":"","x":446,"y":511,"wires":[]},{"id":"f942e705.03c408","type":"comment","z":"9db725b9.2e47d8","name":"Enable / Disable notification","info":"","x":396,"y":693,"wires":[]},{"id":"c549302e.f18be","type":"postgrestor","z":"9db725b9.2e47d8","name":"Update availability","query":"--UPDATE public.datasource \n--SET availability = {{{msg.payload}}} \n--WHERE datasource_id = {{{flow.get('dataSource').id}}};\n\n{{{msg.updateAvailability}}}\n","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":910,"y":1021,"wires":[[]]},{"id":"50d77887.ee6c08","type":"comment","z":"9db725b9.2e47d8","name":"== REMEMBER TO CONFIGURE PAYLOAD AND REPEAT PROPERTY OF INJECT NODE ==","info":"","x":670,"y":40,"wires":[]},{"id":"948c05a2.32e2e8","type":"function","z":"9db725b9.2e47d8","name":"Set dataSource","func":"flow.set('dataSource', msg.payload.dataSource);\nreturn msg;","outputs":1,"noerr":0,"x":123,"y":438,"wires":[["45055407.bc0d3c","8d507665.a1b2e8","a8ac2972.ac72b8"]]},{"id":"f5b68a71.e19218","type":"inject","z":"9db725b9.2e47d8","name":"","topic":"","payload":"{\"dataSource\":{\"id\":1003}}","payloadType":"json","repeat":"","crontab":"","once":true,"x":90,"y":380,"wires":[["948c05a2.32e2e8"]]},{"id":"90eab612.ce0218","type":"function","z":"9db725b9.2e47d8","name":"sqlRobot","func":"// Update robot status in PostgreSQL\nvar dataSource = flow.get('dataSource');\n\nmsg.updateRobotStarted = \"UPDATE public.datasource SET robot_started = \" + msg.payload +\n                         \" WHERE datasource_id = \" + dataSource.id + \";\";\n                         \n// Reset notification counter\nflow.set('mailSent', false);\n\n// Timestamp for when robot is started\nif(msg.payload){\n    flow.set('tsRobotStarted', Date.now());\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":993.5,"y":450.5999755859375,"wires":[["73fce3dd.1d5eec"]]},{"id":"57a8ca09.069b44","type":"function","z":"9db725b9.2e47d8","name":"sqlNotify","func":"var dataSource = flow.get('dataSource');\n\nmsg.updateNotification = \"UPDATE public.datasource SET notification_on = \" + msg.payload +\n                         \" WHERE datasource_id = \" + dataSource.id + \";\";\n\nreturn msg;","outputs":1,"noerr":0,"x":936,"y":773,"wires":[["8ac777ae.237d78"]]},{"id":"ad9aca19.85ed28","type":"comment","z":"9db725b9.2e47d8","name":"Flows to monitor functionality","info":"","x":160,"y":305,"wires":[]},{"id":"54f1e35d.243dac","type":"function","z":"9db725b9.2e47d8","name":"Set dataSource","func":"flow.set('dataSource', msg.payload.dataSource);\nreturn msg;","outputs":1,"noerr":0,"x":126,"y":999,"wires":[["fd4acafd.09a668","f595ceee.abf5f","41e73ad5.efa884"]]},{"id":"a5a61cce.f784a","type":"inject","z":"9db725b9.2e47d8","name":"","topic":"","payload":"{\"dataSource\":{\"id\":1003}}","payloadType":"json","repeat":"2","crontab":"","once":true,"x":93,"y":941,"wires":[["54f1e35d.243dac"]]},{"id":"a77654cb.5f1bf8","type":"comment","z":"9db725b9.2e47d8","name":"Enable / Disable sensor log","info":"","x":386,"y":812,"wires":[]},{"id":"984538a.23fccc8","type":"postgrestor","z":"9db725b9.2e47d8","name":"Update sensor log","query":"{{{msg.updateSensorLog}}}","postgresDB":"42aa36d9.384f48","output":true,"outputs":1,"x":769,"y":862,"wires":[[]]},{"id":"e18c75f.b8e6e88","type":"function","z":"9db725b9.2e47d8","name":"sqlSensorLog","func":"// Update sensor log in PostgreSQL\nvar dataSource = flow.get('dataSource');\n\nmsg.updateSensorLog = \"UPDATE public.sensor_object_nodes SET sensor_log = \" + msg.payload +\n                      \" WHERE datasource_id = \" + dataSource.id + \";\";\n                         \nreturn msg;","outputs":1,"noerr":0,"x":559,"y":862,"wires":[["984538a.23fccc8"]]},{"id":"2d4c6cac.3aed54","type":"postgrestor","z":"9db725b9.2e47d8","name":"Update this sensor log","query":"{{{msg.updateThisSensorLog}}}","postgresDB":"42aa36d9.384f48","output":true,"outputs":1,"x":1710,"y":647,"wires":[[]]},{"id":"3439d91d.e646c6","type":"function","z":"9db725b9.2e47d8","name":"sqlLogThisSensor","func":"// Update sensor log in PostgreSQL\nvar selectedSensor = flow.get('selectedSensor');\n\nmsg.updateThisSensorLog = \"UPDATE public.sensor_object_nodes SET sensor_log = \" + msg.payload +\n                      \" WHERE sensor_object_node_key = \" + selectedSensor + \";\";\n                         \nreturn msg;","outputs":1,"noerr":0,"x":1494,"y":647,"wires":[["2d4c6cac.3aed54"]]},{"id":"d81a6146.a04f","type":"function","z":"9db725b9.2e47d8","name":"Get Sensor Log","func":"if(msg.payload.rows[0].sensor_log){\n    msg.payload = msg.payload.rows[0].sensor_log;\n} else {\n    msg.payload = false;\n}\nreturn msg;","outputs":1,"noerr":0,"x":1103,"y":648,"wires":[[]]},{"id":"27e0f152.f4c68e","type":"function","z":"9db725b9.2e47d8","name":"Selected sensor","func":"flow.set('selectedSensor', msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":874,"y":527,"wires":[[]]},{"id":"ed678ea8.c8ade","type":"comment","z":"9db725b9.2e47d8","name":"Make list of sensors and log settings","info":"","x":420,"y":1240,"wires":[]},{"id":"41e73ad5.efa884","type":"postgrestor","z":"9db725b9.2e47d8","name":"Select sensor log data","query":"SELECT sensor_object_node_key, sensor_log \nFROM public.sensor_object_nodes \nWHERE datasource_id = {{{msg.payload.dataSource.id}}};","postgresDB":"b32cf413.1278d8","output":true,"outputs":1,"x":378,"y":1294,"wires":[["828f86ac.c66c68"]]},{"id":"828f86ac.c66c68","type":"function","z":"9db725b9.2e47d8","name":"List of sensor id and log settings","func":"var i = 0;\nvar sensorLogMapping = {};\n    \nfor ( i = 0; i < msg.payload.rows.length; i++ ) {\n    sensorLogMapping[msg.payload.rows[i].sensor_object_node_key] = msg.payload.rows[i].sensor_log;\n}\n\nglobal.set('sensorLogMapping', sensorLogMapping);\n\nreturn null;\n","outputs":1,"noerr":0,"x":635,"y":1294,"wires":[[]]},{"id":"b9f4c9c2.bcc3a8","type":"http in","z":"9db725b9.2e47d8","name":"","url":"/sensor_log","method":"get","upload":false,"swaggerDoc":"","x":120,"y":1620,"wires":[["bc16b2d5.8f39b"]]},{"id":"481cf7c4.5d31f8","type":"http response","z":"9db725b9.2e47d8","name":"","statusCode":"","headers":{},"x":764,"y":1620,"wires":[]},{"id":"bc16b2d5.8f39b","type":"file in","z":"9db725b9.2e47d8","name":"","filename":"/usr/src/node-red/sensor.log","format":"utf8","chunk":false,"sendError":false,"x":370,"y":1620,"wires":[["5e4128ab.1228e8"]]},{"id":"5e4128ab.1228e8","type":"function","z":"9db725b9.2e47d8","name":"Format log data","func":"msg.payload = msg.payload.replace(/\\n/gm,'<br>');\nreturn msg;","outputs":1,"noerr":0,"x":601,"y":1620,"wires":[["481cf7c4.5d31f8"]]},{"id":"ea23f519.4c9628","type":"comment","z":"9db725b9.2e47d8","name":"Reboot flow if not connected","info":"","x":160,"y":1710,"wires":[]},{"id":"c5e098f.1302068","type":"tail","z":"9db725b9.2e47d8","name":"","filetype":"text","split":false,"filename":"/usr/src/node-red/hepwat.log","x":160,"y":1760,"wires":[["7b03893b.810998"]]},{"id":"7b03893b.810998","type":"function","z":"9db725b9.2e47d8","name":"If not connected","func":"if(msg.payload.includes(\"ClientSessionKeepAliveManager\")){\n    return msg;\n}\nelse{\n    return null;\n}","outputs":1,"noerr":0,"x":392,"y":1760,"wires":[["2172290d.98f266"]]},{"id":"2172290d.98f266","type":"exit","z":"9db725b9.2e47d8","name":"","exitcode":"1","x":569,"y":1760,"wires":[]},{"id":"b6bc3661.91cb78","type":"ui_group","z":"9db725b9.2e47d8","name":"IGSS","tab":"fdd5ae4d.e63e","order":1,"disp":false,"width":"6","collapse":false},{"id":"348a3d06.711442","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"10000"},{"id":"b32cf413.1278d8","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"10000"},{"id":"fdd5ae4d.e63e","type":"ui_tab","z":"","name":"IGSS","icon":"dashboard","order":1},{"id":"b3aad4a8.c79a08","type":"tab","label":"Produce Kafka Topic data from IGSS","disabled":false,"info":""},{"id":"d55892cf.fb422","type":"postgrestor","z":"b3aad4a8.c79a08","name":"Query Sensor Object Nodes","query":"SELECT sensor_object_node_id, sensor_object_node_key, datatype, \"interval\"\nFROM public.sensor_object_nodes\nWHERE (datasource_id = {{{ msg.dataSource.id }}}) AND (readable = true);","postgresDB":"42aa36d9.384f48","output":true,"outputs":1,"x":240,"y":240,"wires":[["854e2abe.c57fa8"]]},{"id":"ce38e390.74d5d","type":"inject","z":"b3aad4a8.c79a08","name":"Initialize import of local IGSS","topic":"","payload":"{\"dataSource\":{\"id\":1003}}","payloadType":"json","repeat":"","crontab":"","once":true,"onceDelay":"","x":180,"y":100,"wires":[["932bc9bc.bdc678"]]},{"id":"932bc9bc.bdc678","type":"postgrestor","z":"b3aad4a8.c79a08","name":"Query datasource","query":"SELECT DATASOURCE_ID, NAME, URL \nFROM public.DATASOURCE \nWHERE DATASOURCE_ID = {{{ msg.payload.dataSource.id }}};\n","postgresDB":"42aa36d9.384f48","output":true,"outputs":1,"x":210,"y":180,"wires":[["fe3bb3f6.6fc43"]]},{"id":"fe3bb3f6.6fc43","type":"function","z":"b3aad4a8.c79a08","name":"Extract datasource","func":"if(msg.payload && msg.payload.rows && msg.payload.rows.length > 0) {\n    var dataSource = {\n        id: msg.payload.rows[0].datasource_id,\n        name: msg.payload.rows[0].name,\n        url: msg.payload.rows[0].url,\n        defaultInterval: 2000\n    };\n    msg.payload = {};\n    msg.dataSource = dataSource;\n    return msg;\n}\nelse \n    return null;","outputs":1,"noerr":0,"x":450,"y":180,"wires":[["d55892cf.fb422"]]},{"id":"8b979558.e95bb8","type":"OpcUa-Client","z":"b3aad4a8.c79a08","endpoint":"8e94544e.e90e68","action":"subscribe","time":"2","timeUnit":"s","name":"","x":501,"y":338,"wires":[["a24d07ab.bef4a8"]]},{"id":"854e2abe.c57fa8","type":"function","z":"b3aad4a8.c79a08","name":"Prepare subscriptions","func":"if ( msg.payload && msg.payload.rows && msg.payload.rows.length > 0 ) {\n    var _sId = 0;\n    var nodeTopicIdMapping = {};\n    \n    for ( _sId = 0; _sId < msg.payload.rows.length; _sId++ ) {\n        nodeTopicIdMapping[msg.payload.rows[_sId].sensor_object_node_id] = msg.payload.rows[_sId].sensor_object_node_key;\n    }\n\n    flow.set('nodeTopicIdMapping', nodeTopicIdMapping);\n    \n    _sId = 0;\n    for ( _sId = 0; _sId < msg.payload.rows.length; _sId++ ) {\n        \n        // var oPayload = {topic: msg.payload.rows[_sId].sensor_object_node_id, \n        //    datatype: msg.payload.rows[_sId].datatype,\n        //    interval: msg.payload.rows[_sId].interval ? msg.payload.rows[_sId].interval : msg.dataSource.defaultInterval};\n            \n        node.send({ \n            topic: msg.payload.rows[_sId].sensor_object_node_id, \n            datatype: msg.payload.rows[_sId].datatype,\n            interval: msg.payload.rows[_sId].interval ? msg.payload.rows[_sId].interval : msg.dataSource.defaultInterval,\n            dataSource: {\n                id: msg.dataSource.id,\n                url: msg.dataSource.url,\n                defaultInterval: msg.dataSource.defaultInterval\n            }\n            // payload: 2000\n        });\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":520,"y":240,"wires":[["6b3f3ec6.05b5e"]]},{"id":"a24d07ab.bef4a8","type":"function","z":"b3aad4a8.c79a08","name":"Prepare topic payload","func":"var _nodeTopicIdMapping = flow.get('nodeTopicIdMapping');\nmsg.key = _nodeTopicIdMapping[msg.topic];\nmsg.payload = {\n    timestamp: (new Date(msg.serverTimestamp)).getTime(),\n    hepwatDeviceId: _nodeTopicIdMapping[msg.topic],\n    value: msg.payload,\n    interval: _nodeTopicIdMapping[msg.interval]\n};\n\nmsg.updateLastRun = \"UPDATE public.sensor_object_nodes SET lastrun = to_timestamp(\" +\n                    msg.payload.timestamp * 0.001 + \"), lastvalue = \" +  msg.payload.value +\n                    \" WHERE (sensor_object_node_key = \" + msg.payload.hepwatDeviceId + \");\";\n\nreturn msg;","outputs":1,"noerr":0,"x":720,"y":338,"wires":[["849b9ecf.583d","d174df8f.c0bda"]]},{"id":"3d00cb2a.391eb4","type":"sagofonto-kafka-producer","z":"b3aad4a8.c79a08","kafkaHost":"localhost:9092","connectTimeout":"10000","requestTimeout":"30000","requireAcks":"1","ackTimeoutMs":"100","partitionerType":"3","topicName":"raw-test-10","compressionOption":"0","x":1119,"y":306,"wires":[]},{"id":"41f2a596.86d2bc","type":"comment","z":"b3aad4a8.c79a08","name":"Read IGSS topics from database and produce data for Kafka topic","info":"","x":280,"y":40,"wires":[]},{"id":"6b3f3ec6.05b5e","type":"delay","z":"b3aad4a8.c79a08","name":"","pauseType":"rate","timeout":"500","timeoutUnits":"milliseconds","rate":"50","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":296,"y":338,"wires":[["8b979558.e95bb8"]]},{"id":"787af261.23fcfc","type":"catch","z":"b3aad4a8.c79a08","name":"","scope":null,"x":129.0999984741211,"y":538.8000545501709,"wires":[[]]},{"id":"9a32ff2f.10109","type":"e-mail","z":"b3aad4a8.c79a08","server":"localhost","port":"25","secure":false,"name":"","dname":"Send error mail","x":532.1001052856445,"y":538.6001424789429,"wires":[]},{"id":"afb7bfb9.8905d","type":"function","z":"b3aad4a8.c79a08","name":"Prepare error email","func":"var outMsg = {\n    to: 'mail@to.dk',\n    from: 'mail@from.dk',\n    topic: 'Error in Node-Red flow: Produce Kafka Topic data from IGSS',\n};\n\nif(msg.error && msg.error.message){\n    outMsg.payload = '<p style=\"font-family: Trebuchet MS;\">The following error was thrown:</p>';\n    outMsg.payload += '<p style=\"font-family: Trebuchet MS;\">' + msg.error.message + '</p>';\n    if(msg.error.source){\n        outMsg.payload += '<p style=\"font-family: Trebuchet MS;\"><b>Source:</b>';\n        if(msg.error.source.id) outMsg.payload +=   '<li style=\"font-family: Trebuchet MS;\">Id: ' + msg.error.source.id + '</li>';\n        if(msg.error.source.type) outMsg.payload += '<li style=\"font-family: Trebuchet MS;\">Type: ' + msg.error.source.type + '</li>';\n        if(msg.error.source.name) outMsg.payload += '<li style=\"font-family: Trebuchet MS;\">Name: ' + msg.error.source.name + '</li>';\n        outMsg.payload += '</p>';\n    }\n    outMsg.payload += '<p><a href=\"http://localhost:1880/#flow/734ca447.c696fc\" target=\"_blank\">Goto flow...</a></p>';\n}\n\nreturn outMsg;","outputs":1,"noerr":0,"x":332.09999084472656,"y":538.6001453399658,"wires":[["9a32ff2f.10109"]]},{"id":"9f4b763a.cdcb98","type":"comment","z":"b3aad4a8.c79a08","name":"Logging and error handling","info":"","x":153,"y":466,"wires":[]},{"id":"d334b17b.1d8f4","type":"sagofonto-log-backup","z":"b3aad4a8.c79a08","sourcePath":"/usr/src/node-red/","sourceFilename":"hepwat.log","destPath":"/usr/src/node-red/logs/","x":312.5,"y":593.7999877929688,"wires":[[]]},{"id":"14222b47.27d5a5","type":"inject","z":"b3aad4a8.c79a08","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 06 * * 1,3,5,0","once":false,"onceDelay":"","x":139.5,"y":594.2999877929688,"wires":[["d334b17b.1d8f4"]]},{"id":"849b9ecf.583d","type":"subflow:9db725b9.2e47d8","z":"b3aad4a8.c79a08","name":"","x":936,"y":306,"wires":[["3d00cb2a.391eb4"]]},{"id":"d174df8f.c0bda","type":"function","z":"b3aad4a8.c79a08","name":"Sensor Log","func":"delete msg.updateLastRun\nvar sensorLogMapping = global.get('sensorLogMapping');\n\nif(sensorLogMapping[msg.payload.hepwatDeviceId]){\n    return msg;\n    \n} else {\n    return null;\n}\n","outputs":1,"noerr":0,"x":924,"y":370,"wires":[["6e80d811.e49bf8"]]},{"id":"9ffb5919.cd4078","type":"file","z":"b3aad4a8.c79a08","name":"","filename":"/usr/src/node-red/sensor.log","appendNewline":true,"createDir":false,"overwriteFile":"false","x":1271,"y":400,"wires":[]},{"id":"6e80d811.e49bf8","type":"function","z":"b3aad4a8.c79a08","name":"msg","func":"msg.payload = JSON.stringify(msg);\nreturn msg;","outputs":1,"noerr":0,"x":1070,"y":400,"wires":[["9ffb5919.cd4078"]]},{"id":"42aa36d9.384f48","type":"postgresDB","z":"","name":"@localhost:5432/hepwat","host":"localhost","port":"5432","database":"hepwat","ssl":false,"max":"100","min":1,"idle":"10000"},{"id":"8e94544e.e90e68","type":"OpcUa-Endpoint","z":"","endpoint":"opc.tcp://10.100.1.31:12403/IGSS/IGSSOpcUaServer","secpol":"None","secmode":"NONE","login":false}]